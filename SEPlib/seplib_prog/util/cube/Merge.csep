/*$
=head1 NAME

Scat , Merge , Cat-  Concatenate SEP77 datasets, 3 names for exactly the same code.

=head1 SYNOPSIS

  Merge axis=3 space=[y/n] Header1 Header2 Header3 ... > out.H

=head1 INPUT PARAMETERS

=over 4

=item   Header   - files   

        seplib history header files to merge.

=item   axis     - int    

        [3]  axis number to merge (1,2,3)

=item   space    - char  

        [y] leave space between merged data to make it easy to tell
            where one file ends and the next begins in merged movies
            default: space=y for Merge, space=n for Cat

=item   nspace   - int    

        number of traces in the space
        (defaults to something reasonable).

=item   n1       - int   

        if n1=-1 this means that the data is simply read 
        until EOF for each file; this is like using 'cat' on 
        the individual data files. Note n1=-1 implies axis=3 space=n

=back

=head1 DESCRIPTION

Merge seplib header and data file to stdout. Merge is a modified
version of Cat (the same code, but with a perl script on the front end to 
fix some problems). Scat is the same thing.


=head1 COMMENTS

    Note, a header provided on stdin will be used. This was not true
    in previous versions. I.e. this will work!
    Myprog <data.H | Merge axis=2 data2.H > out.H

=head1 CATEGORY

B<util/cube>

=cut

DISTR
>*/

/*
copyright (c) 1991 Stanford University
*/
/*
 * Author: Peter Mora        4/21/84  Stanford University Dept Geophysics
 *            Modified version of Cat by Stew Levin with
 *            program history below.
 * Author: Stewart A. Levin   5/12/83  Stanford University Dept Geophysics
 * Revised:   ""     ""       11/9/83  Dropped stream I/O -- too slow!
 * Revised:   ""     ""       4/4/84  Downgraded o1/d1 mismatch to warning
 * Revised:   ""     ""       4/9/84  Defaulted n3 to 1
 * Revised:Peter Mora         5/7/84 Added title
 * Revised:Peter Mora         12/16/84 fixed header from outputing n3=0 or n2=0
 * Revised:Stewart. A. Levin  12/16/84 added transp to seplib parm to ease
 *           merging of movie files
 *         Joe Dellinger      Feb 24 92  o1, o2, o3 = 0 is NOT the same as o1,
 *                                       o2, o3 undefined! o mismatch is
 *                                       not a warning if it happens on the
 *                                       axis being merged.
 *                                       Fixed major bug in header checking.
 *                                       Merge copies first header on through;
 *                                       so don't need to explicitly copy stuff
 *                                       getch2'd from first header.
 *           Merge and Cat have been Merged!
 *           (Or is that Cat and Merge have been
 *           Concatenated? Nah...)
 * Revised:Dave Nichols 8/19/84
 *    Changed to only use tag based seplib functions not fd based.
 *    Changed to use multihdr routine (shared with Add)
 */
/*
 * Keyword: merge header
 */

#include <stdlib.h>
#include <seplib.h>
#include <string.h>
#include <sepaux.h>
static char     trdecode[] = "ny";
static int      i1, i2, i3, nsum, axis, nspace;
static int      space;

#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
static int head_neq (struct _sep *, int);
int write_space (char*, long int);
_XFUNCPROTOEND
#else
static int head_neq ();
int write_space ();
#endif

static char     copy_buf[BUFSIZ];  /* for efficient data transfer */

char           **xenvp;

int main (int argc, char **argv, char **envp)
{
	extern int		sepxargc;
	extern char		**sepxargv, **xenvp;
	char			title[80];
	int				nhead, ihead, ierr, ierrnow;
	int				n1, n2, n3;
	long int		nbytes;
	int				nbuf, lbuf, ibuf, nread;
	struct _sep		*info;
	FILE			*headstream;
	char			*ourname;

	initpar(argc, argv);
	xenvp = envp;
  ADD_SEP_DOC

	doc (SOURCE);    /* call it quits if headers not supplied */
	/* doc returns only if stdin is redirected when sepxargc=1 */

	/* count the number of headers in the argument list */
	nhead = 0 * pi;
	/*
	* (In case you were wondering, the gratuitous multiplication by pi is
	* to stop a complaint about pi being unused when "lint" is run.)
	*/

	/* read all the headers */
	nhead = init_multihdr(argc, argv, &info);

	n1=info[0].standard[0].n;
	n2=info[0].standard[1].n;
	n3=info[0].standard[2].n;

	/* get axis number */
	if (n1 != -1) { /* regular seplib data input */
		axis = 3;
		getch ("axis", "d", &axis);
		if (axis > 3 || axis < 1)
		seperr ("Only know about axis = 1 through 3.\n");

		/*
		* Find out whether we are "Merge" or "Scat"!
		* And default "space" accordingly.
		*/
		if (NULL==(ourname=strrchr(sepxargv[0],'/'))) ourname=sepxargv[0];
		else ourname++;

		if (strcmp(ourname,"Merge")==0) space=1;
		else if (strcmp(ourname,"Cat")==0) space=0;
		else if (strcmp(ourname,"Scat")==0) space=0;
		else {
			fprintf (stderr, "%s: What, neither Merge nor Scat? Behaving like Merge, then.\n", ourname);
			space = 1;
		}
		getch ("space", "1", &space);
    } else {
		axis = 3;
		space = 0;
	}

	if (axis==1) {
		i1=2;
		i2=3;
		i3=1;
	} else if (axis==2) {
		i1=1;
		i2=3;
		i3=2;
	} else if (axis==3) {
		i1=1;
		i2=2;
		i3=3;
	}

	if (axis==3) {
		if (n1 != -1 && (n1 < 0 || n2 < 0))
			seperr ("Need to know n1 and n2\n");
    } else if (axis==2) {
		if (n1 < 0 || n3 < 0)
			seperr ("Need to know n1 and n3\n");
	}
    else if (axis==1) {
		if (n2 < 0 || n3 < 0)
			seperr ("Need to know n2 and n3\n");
	}

	/* check for compatibility between headers */
	ierr=0;
	for (ihead=0; ihead < nhead-1; ihead++) {
		if ((ierrnow = head_neq (info, ihead))) {
			if (ierr < ierrnow) {
				ierr=ierrnow;
				switch (ierr) {
					case 1:
						fprintf (stderr, "%s: Warning! header mismatch\n\n", 
							sepxargv[0]);
						break;
					case 2:
						fprintf (stderr, "%s: Error! header mismatch\n\n", 
							sepxargv[0]);
						break;
				}
			}
  		}
    }
    if (ierr) {
		fprintf (stderr, "Header info list follows:\n");
		for (ihead=0; ihead < nhead; ihead++)
			struct_dump(info+ihead);
		switch (ierr) {
			case 1:
				break;
			case 2:
				seperr ("n's not along axis being merged and esize have to be consistent.\n");
		}
	}

	/* figure out new n3 value */
	nsum = 0;
	for (ihead = 0; ihead < nhead; ihead++)
		nsum +=info[ihead].standard[i3-1].n;
	if (space) {
		if(!getch("nspace","d",&nspace)) nspace=nsum/(20*nhead)+1;
		nsum=nsum+nspace*(nhead-1);
	} else {
		nspace = 0;
	}
	if (axis==1) n1=nsum;
	else if (axis==2) n2=nsum;
	else if (axis==3) n3=nsum;

	/*
	* If you explicitly set d1, d2, or d3 to be zero in your input headers,
	* you should get what you asked for. So took check for d1, d2, d3 zero out!
	*  - Joe
	*/
	/* make sure d1,d2,d3 are non-zero. Otherwise plot programs will have problems */
	/*
	*   if(info[0].standard[0].d == 0.0 ) info[0].standard[0].d = 1.;
	*   if(info[0].standard[1].d == 0.0 ) info[0].standard[1].d = 1.;
	*   if(info[0].standard[2].d == 0.0 ) info[0].standard[2].d = 1.;
	*/


    /* construct composite header */
    /* first header is automatically copied to tag=out 
		because we made it the header for tag==in */
	if(output() == 0) seperr("Unable to open output header");

	headstream = sep_head ();

	fprintf (headstream,"\n Input header list:\n");
	for (ihead=0; ihead < nhead; ihead++) {
		fprintf(headstream,"\t<%s old_in=%s\n",info[ihead].header,info[ihead].in);
    }

	if (n3==0) n3=1;
	if (n2==0) n2=1;
	if (n1==-1) {
		fprintf(headstream,"\tesize=%d n1=%d n3=%d\n",1,n1,n3);
		if (getch("title","s",title))
		fprintf(headstream,"\ttitle=\"%s\"\n",title);
		fprintf(headstream,"\taxis=%d\n",axis);
    } else {
		fprintf(headstream,"\tesize=%d n1=%d n2=%d n3=%d\n",info[0].esize,n1,n2,n3);
		fprintf(headstream,"\to1=%f o2=%f o3=%f\n",
			info[0].standard[0].o,info[0].standard[1].o,info[0].standard[2].o);
		fprintf (headstream,"\td1=%f d2=%f d3=%f\n",
			info[0].standard[0].d,info[0].standard[1].d,info[0].standard[2].d);
		if (getch("title","s",title))
			fprintf (headstream,"\ttitle=\"%s\"\n",title);
		if (info[0].esize==1)
			fprintf (headstream,"\ttransp=\"%c\"\n",trdecode[info[0].transp]);
			fprintf (headstream,"\taxis=%d\n",axis);
	}

	/* header processing complete */
	hclose ();

	/* finally send data on its way */
	if (axis == 1) { /*  n1 merge */

		/* read and write a vector at a time */
		for (i3=0; i3 < n3; i3++) {
			for (i2=0; i2 < n2; i2++) {
				for (ihead=0; ihead < nhead; ihead++) {
					nbytes=info[ihead].standard[0].n*info[ihead].esize;
					nbuf=(int)(nbytes-1)/BUFSIZ;
					lbuf=(int)nbytes-nbuf*BUFSIZ;
					for(ibuf=0; ibuf <= nbuf; ibuf++) {
						nread=sreed_raw(info[ihead].tag,copy_buf,lbuf);
						if (nread == lbuf) {
							(void) srite_raw ("out",copy_buf,lbuf);
						} else {
							perror (sepxargv[0]);
							seperr ("unexpected eof reading data file %s\n",
								info[ihead].in);
						}
						lbuf=BUFSIZ;
					}
					if (space && ihead < nhead-1) {
						nbytes=nspace*info[ihead].esize;
						write_space ("out",nbytes);
					}
				}
			}
		}
		for (ihead=0; ihead < nhead; ihead++) {
			auxclose(info[ihead].tag);
		}
    } else if (axis == 2) {
		/*  n2 merge */
		/* read and write a plane at a time */
		for (i3=0; i3 < n3; i3++) {
			for (ihead=0; ihead < nhead; ihead++) {
				nbytes=info[ihead].standard[1].n*info[ihead].standard[0].n 
					* info[ihead].esize;
				nbuf=(int) (nbytes-1)/BUFSIZ;
				lbuf=(int) (nbytes-nbuf*BUFSIZ);
				for (ibuf=0; ibuf <= nbuf; ibuf++) {
					nread=sreed_raw (info[ihead].tag,copy_buf,lbuf);
					if (nread==lbuf) (void) srite_raw ("out",copy_buf,lbuf);
					else {
						perror (sepxargv[0]);
						seperr ("unexpected eof reading data file %s\n", 
							info[ihead].in);
					}
					lbuf=BUFSIZ;
				}
				if (space && ihead < nhead-1) {
					nbytes=nspace*info[ihead].esize*n1;
					write_space ("out",nbytes);
				}
			}
		}
		for (ihead=0; ihead < nhead; ihead++) {
			auxclose(info[ihead].tag);
		}
	} else if (axis==3 && n1 != -1) {
		/*  n3 merge */
		for (ihead=0; ihead < nhead; ihead++) {
			nbytes=info[ihead].standard[2].n*info[ihead].standard[1].n *
				info[ihead].standard[0].n*info[ihead].esize;
			nbuf=(int) (nbytes-1)/BUFSIZ;
			lbuf=(int) (nbytes-nbuf*BUFSIZ);
			for (ibuf=0; ibuf <= nbuf; ibuf++) {
				nread=sreed_raw (info[ihead].tag,copy_buf,lbuf);
				if (nread==lbuf)
					(void) srite_raw ("out",copy_buf,lbuf);
				else {
					perror (sepxargv[0]);
					seperr ("unexpected eof reading data file %s\n",info[ihead].in);
				}
				lbuf = BUFSIZ;
			}
			auxclose(info[ihead].tag);
			if (space && ihead < nhead-1) {
				nbytes=nspace*info[ihead].esize*n1*n2;
				write_space ("out",nbytes);
			}
		}
	} else if (n1 == -1) {
		for (ihead=0; ihead < nhead; ihead++) {
			while (n1== -1)  { /*useless while */
				nread = sreed_raw (info[ihead].tag, copy_buf, BUFSIZ);
				(void) srite_raw ("out", copy_buf, nread);
				if (nread < BUFSIZ) break;
			}
			auxclose( info[ihead].tag );
		}
	}

	return (EXIT_SUCCESS);
}



#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
static int head_neq (struct _sep *info, int ihead)  
_XFUNCPROTOEND
#else
static int head_neq (info, ihead)  
    struct _sep    *info;
    int             ihead;
#endif

{
	if (info[ihead].standard[0].n == -1) {
		/*
		* The "just cat the datafiles together" case.
		* We better have n1=-1 for all the header files or something is amiss!
		* Other then that we don't care.
		*/
		if (info[ihead].standard[0].n != info[ihead + 1].standard[0].n)
		return (2);
	} else {
		/*
		* Check esize and transp match
		*/
		if (info[ihead].esize != info[ihead + 1].esize) return (2);
		if (info[ihead].esize == 1)
			if (info[ihead].transp != info[ihead + 1].transp)
				return (2);

		/*
		* Check n's match; skip axis being merged over.
		*/
		if (info[ihead].standard[i1-1].n != info[ihead+1].standard[i1-1].n)
			return (2);
		if (info[ihead].standard[i2-1].n != info[ihead+1].standard[i2-1].n)
			return (2);

		/*
		* Check o's match; skip axis being merged over.
		* Beware floating-point errors in the equality checking.
		* Use first number to set fuzz level allowed in check.
		*/
		if (fabs(info[ihead].standard[i1-1].o-info[ihead+1].standard[i1-1].o)
			> 1.e-5*fabs(info[ihead].standard[i1-1].o)) return (1);
		if (fabs(info[ihead].standard[i2-1].o-info[ihead+1].standard[i2-1].o)
			> 1.e-5*fabs(info[ihead].standard[i2-1].o)) return (1);

		/*
		* Check all three d's.
		* Beware floating-point roundoff errors in the equality checking.
		* Use first number to set fuzz level allowed in check.
		*/
		if (fabs(info[ihead].standard[i1-1].d-info[ihead+1].standard[i1-1].d)
			> 1.e-5*fabs(info[ihead].standard[i1-1].d)) return (1);
		if (fabs(info[ihead].standard[i2-1].d-info[ihead+1].standard[i2-1].d)
			> 1.e-5*fabs(info[ihead].standard[i2-1].d)) return (1);
		if (fabs(info[ihead].standard[i3-1].d-info[ihead+1].standard[i3-1].d)
			> 1.e-5*fabs(info[ihead].standard[i3-1].d)) return (1);
    }
	return (0);
}

#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int write_space (char *outtag, long int nbytes)
_XFUNCPROTOEND
#else
int write_space (outtag, nbytes)
    char*           outtag;
    long int        nbytes;
#endif
{
	int             nbuf, lbuf, ibuf;

	nbuf=(int) (nbytes-1)/BUFSIZ;
	lbuf=(int)( nbytes-nbuf*BUFSIZ);
	for (ibuf=0; ibuf < BUFSIZ; ibuf++) {
		copy_buf[ibuf]='\0';
	}
	for (ibuf=0; ibuf <= nbuf; ibuf++)
    {
		(void) srite_raw (outtag, copy_buf, lbuf);
		lbuf = BUFSIZ;
	}
	return (0);
}
