/*$

=head1 NAME

Patch - Create patches (or combine patches) 

=head1 SYNOPSIS

Patch  <in.H >out.H nwind1= nwind2= nwind3= npatch1= npatch2= npatch3= inv=  nout=

=head1  INPUT PARAMETERS

=over 4

=item  inv   -  int
  
       [0] Wheter to form (0) or stitch (1) patches
      

=item  npatchx      - int

       [1]   Number of patces along a given axis (only used when inv=0)


=item  nwindx      - int

       [nx]   The size of a patch along a given axis (only used when inv=0)

=item   noutx     -  int  

                The size of the output combined dataset (only used when inv=1)

=item  verb      - int
  
       [0]   Whether (1) or not (0) to be verbose

=back

=head1 DESCRIPTION

 Create patches from a SEP regular cube.  Adds extra dimensions corresponding
 to the patch axis

=head1 CATEGORY

B<util/cube>

=cut

>*/ 
/*
-------------------------------------------------

Author: Robert Clapp, ESMB 421, 7251253

Date Created:Thursday Oct 25 18:05:39 PDT 2006

Purpose: 

*/	 
#include <stdlib.h>
#include <unistd.h>
#include <sepaux.h>
#include <sep3d.h>
void get_params(int *inv,int *ndim, int *n, int *npatch, int *nwind, int *verb,int *esize);
void describe_out(int inv, int ndim,int *n, int *npatch, int *nwind);
ADD_DEF_SEP_DOC
#include <sep.main> 
int MAIN(void)
{
  int ndim, naxes, npatches,i,inv,verb,esize;
  size_t ntot,nn;
  int npatch[5],nwind[5],n[5],ib;
  float *buf,*buf2;
  long long ndone,ndo;
  char temp_ch[128];
  int iverb;
  int rc;

    sep_begin_prog();
    get_params(&inv,&ndim,n,npatch,nwind,&verb,&esize);
    describe_out(inv,ndim,n,npatch,nwind);

    oc_patch_init(ndim,n,nwind,npatch,&npatches);

    iverb=npatches/10;
    if(iverb==0) iverb=1;
    ntot=esize/4*sizeof(float);
    for(i=0; i < ndim; i++) ntot=ntot*nwind[i];
    buf=(float*)malloc(ntot*4);


    if(inv==0){
      for(i=0; i < npatches; i++){
        nn=i/iverb;
        if(verb==1 && nn*iverb==i) fprintf(stderr,"Working on %d of %d \n",i,npatches);
        if(0!=oc_patch_get("in",i,esize,(char*)buf)) seperr("trouble reading patch");
      if(ntot!=srite_big("out",buf,ntot)) seperr("trouble writing patch");
      }
    }
    else{
    
      buf2=(float*)malloc(sizeof(float)*ntot);
      ndo=esize/4;
      for(i=0; i < ndim; i++) ndo=ndo*(long long) n[i];
      for(i=0; i < ntot/4; i++)  buf[i]=0.;
      ndone=0;
      if(verb==1) fprintf(stderr,"Zeroing output\n");
      strcpy(temp_ch,"in");
      strcpy(temp_ch,"TEMP_XXXXXX"); 
      rc = mkstemp(temp_ch);
      if(rc == -1) {
         perror("Patch: mkstemp ");
         seperr("Patch: error creating temp file \"%s\".\n", temp_ch);
      }
      auxtmp(temp_ch); close(rc);
      while(ndone < ndo){
        nn=ntot;
        if(ndo - ndone < nn) nn=ndo-ndone;
        if(nn*4!=srite_big(temp_ch,buf,nn*4)) seperr("trouble zeroing data");
        ndone+=nn;
      }
      for(i=0; i < npatches; i++){
        nn=i/iverb;
        if(verb==1 && nn*iverb==i) fprintf(stderr,"Working on %d of %d \n",i,npatches);
        if(0!=oc_patch_get(temp_ch,i,esize,(char*)buf2)) seperr("trouble reading patch");
        if(ntot!=sreed_big("in",buf,ntot)) seperr("trouble reading data");
        oc_patch_bound(i,esize,buf);
        for(ib=0; ib < ntot; ib++) buf[ib]=buf[ib]+buf2[ib];
        if(0!=oc_patch_put(temp_ch,i,esize,(char*)buf)) seperr("trouble writing patch");
      }
      sseek(temp_ch,0,0);

      ndone=0; 
      while(ndone < ndo){
        nn=ntot;
        if(ndo - ndone < nn) nn=ndo-ndone;
        if(nn*4!=sreed_big(temp_ch,buf,nn*4)) seperr("trouble reading temp");
        if(nn*4!=srite_big("out",buf,nn*4)) seperr("trouble writing out");
        ndone+=nn;
      }
      aux_unlink(temp_ch);


    }
    return (EXIT_SUCCESS);
}
void get_params(int *inv,int *ndim, int *n, int *npatch, int *nwind, int *verb,int *esize)
{
int nt[8],na[5];
int i,iax;
int axes[6];
char temp_ch[1024];

  if(0!=sep_get_number_data_axes("in",ndim)) 
    seperr("trouble obtaining number of data axes");


  if(0==hetch("esize","d",esize)) *esize=4;
  if(0==getch("inv","d",inv)) *inv=0;
  if(0==getch("verb","d",verb)) *verb=0;

  if(*inv==0){
    if(*ndim>5) seperr("can only handle ndim <=5");
    for(i=0; i < *ndim; i++){
      sprintf(temp_ch,"n%d",i+1);  if(0==hetch(temp_ch,"d",&n[i])) n[i]=1;
      sprintf(temp_ch,"npatch%d",i+1);  if(0==getch(temp_ch,"d",&npatch[i])) npatch[i]=1;
      sprintf(temp_ch,"nwind%d",i+1);  if(0==getch(temp_ch,"d",&nwind[i])) nwind[i]=n[i];
    }
  }
  else{
    if(*ndim>8) seperr("can only handle ndim <=5");
    for(i=0,iax=0; i < *ndim; i++){
      sprintf(temp_ch,"n%d",i+1);  if(0==hetch(temp_ch,"d",&nt[i])) nt[i]=1;
      sprintf(temp_ch,"nout%d",i+1);  if(0==getch(temp_ch,"d",&na[i])) na[i]=1;
      if(nt[i]!=na[i]){
        axes[iax]=i;
        iax++; 
      }
    }
    iax=iax/2;
    *ndim=*ndim-iax;

    for(i=0; i < *ndim; i++){
      nwind[i]=nt[i];
      npatch[i]=1;
      n[i]=na[i];
    }
    for(i=0; i < iax; i++){
      npatch[axes[i]]=nt[*ndim + i];
    }
  }
}


void describe_out(int inv,int ndim,  int *n, int *npatch, int *nwind){
  int i,iax,one=1;
  char temp_ch[128];

  putch("inv","d",&inv);
  if(inv==0){
    iax=0;
    for(i=0; i < ndim; i++){
      if(npatch[i] >1) {
        puthead("Patching along %d \n",i+1);
        sprintf(temp_ch,"n%d",i+1); putch(temp_ch,"d",&nwind[i]);
        sprintf(temp_ch,"n%d",ndim+iax+1); putch(temp_ch,"d",&npatch[i]);
        iax++;
      }
    }
  }
  else{
    iax=0;
    for(i=0; i < ndim; i++){
      if(npatch[i] >1) {
        puthead("Combining along %d \n",i+1);
        sprintf(temp_ch,"n%d",i+1); putch(temp_ch,"d",&n[i]);
        sprintf(temp_ch,"n%d",ndim+iax+1); putch(temp_ch,"d",&one);
        iax++;
      }
    }
  }

}
