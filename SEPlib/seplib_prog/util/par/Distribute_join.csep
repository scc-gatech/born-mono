/*
=head1 NAME



=cut
*/


#include<seplib.h>
#include<sep3dc.h>
#include<sepaux.h>
#include<superset.h>
#include<sep_par.h>
#ifndef SEPNULL2
#define SEPNULL2 ((void *) 0)
#endif
#include<mpi.h>

#define HEAD "/dev/null"
  ADD_DEF_SEP_DOC

int transfer_sect(int isect,sep3d *big,distrib *spread,int nh, int *nsect, 
   int *fsect, sep3d  *small, int *nout, int *fout);
int pass_add_data(int impi,float *data, int n1, int n2,int ifrom, int ito);
void init_mpi_seplib(int argc, char **argv);


int main(int argc, char **argv){
  int nblock[9],dff_axis[9];
  sep3d data,*sects;
  int impi;
  distrib spread;
  int *fwind,*jwind,*nwind;
  int *fsect,*nsect;
  int *fout,*nout;
  int isect,ierr,ia,i,add,e2;
  int max_size,esize,nh,ipt,wh,wg,verb;
  char temp_ch[1024];
  float *buf;
  MPI_Status status;

  init_mpi_seplib(argc,argv);
  if(0!=get_distrib_info(&spread,0,"in_"))
    seperr("trouble getting distribution information");

  impi=sep_thread_num();
  sects=(sep3d*)malloc(sizeof(sep3d)*spread.nown);


  if(0!=create_global_file(&spread,sects,&data))
   seperr("trouble createing global file \n");

  if(0!=calc_sections(&data, &spread)) seperr("trouble creating sections \n");

  if(0==getch("add","d",&add)) add=0;

 if(sep_thread_num()==0){
    auxinout("combo");
    if(add==0)
      if(0!=sep3dc_write_description("combo",&data))
       seperr("trouble writing description");
  }

  if(data.file_format[0]=='R') {wh=0; wg=0;}
  else seperr("Distribute_join only works a regular dataset");

  nwind=(int*) malloc(sizeof(int)*data.ndims);
  fwind=(int*) malloc(sizeof(int)*data.ndims);
  jwind=(int*) malloc(sizeof(int)*data.ndims);
  nsect=(int*) malloc(sizeof(int)*data.ndims);
  fsect=(int*) malloc(sizeof(int)*data.ndims);
  nout=(int*) malloc(sizeof(int)*data.ndims);
  fout=(int*) malloc(sizeof(int)*data.ndims);
  for(i=0; i < data.ndims; i++) jwind[i]=1;


  if(0==getch("verb","d",&verb)) verb=0;
  if(0==getch("max_size","d",&max_size)) max_size=100;
  esize=sep3dc_get_esize(&data);
  e2=esize/4;
  max_size=max_size*1000000/esize/2;
  init_loop_calc(data.ndims,data.n,"MAIN",max_size);


  while(0==do_sep_loop("MAIN",nwind,fwind)){
    for(ia=0; ia <spread.nsect; ia++){
      if(verb==1 && impi==0) {
           fprintf(stderr,"Window sect=%d ",ia);
           for(i=0; i< data.ndims;i++)
             fprintf(stderr,"n%d=%d f%d=%d ",i+1,nwind[i],i+1,fwind[i]);
           fprintf(stderr,"\n");
        }

      isect=spread.isect[ia];
      ierr=local_window(ia,&data,&spread,nwind,fwind,nsect,fsect,nout,fout);
      ipt=spread.ilocal_pt[ia];
      if(ierr==0){
        if(impi!=0){
          if(0!= sep3dc_grab_headers(spread.tag_sect[ia],&sects[ipt],&nh,&nout[1],
            &fout[1], jwind)) seperr("trouble grabbing headers \n");

          MPI_Send(&nh , 1, MPI_INT,0, 14, MPI_COMM_WORLD);

        }
        else {
          MPI_Recv(&nh,1,MPI_INT,spread.sect_thread[ia],14, MPI_COMM_WORLD,&status);
        }


        if(0!= sep3dc_pass_headers(&sects[ipt], spread.sect_thread[ia],0))
          seperr("trouble passing headers");


        if(impi==0){
          if(0!=transfer_sect(ia,&data,&spread,nh,nsect,fsect,&sects[ipt],nout,
            fout)) seperr("trouble transfering section");
        }

        if(nh!=0){
          buf=(float*)malloc(e2*nh*nsect[0]*sizeof(float));
          if(impi!=0){
            if(0!=sep3dc_read_data( spread.tag_sect[ia],&sects[ipt],(void*)buf, nout[0],
              fout[0],jwind[0])) seperr("trouble reading data");
          } 
          else{
            if(add==1){
             if(0!= sep3dc_grab_headers("combo",&data,&nh,&nsect[1],
               &fsect[1], jwind)) seperr("trouble grabbing headers \n");
              if(0!=sep3dc_read_data( "combo", &data, (void*)buf, nsect[0],
                fsect[0],jwind[0])) seperr("trouble reading data");
            } 
            else if(impi==0){
              for(i=0; i< e2*nh*nsect[0];i++) buf[i]=0.;
            }
          }
              
          if(0!=pass_add_data(impi,buf,e2*nsect[0],nh,
            spread.sect_thread[ia],0)) seperr("trouble passing data");
        }
        if(0==impi){
          if(0!= sep3dc_write_data("combo",&data,(void*)buf,nsect,fsect, 
           jwind,nh,wh,wg)) seperr("trouble writing outing data");
        }
        if(nh>0) free(buf);
      } 
    }
  }

  if(impi==0){
    if(0!=sep3dc_update_ntraces(&data))
       seperr("trouble updating traces");
    if(0!=sep3d_rite_num_traces("combo",&data))
       seperr("trouble writing number of traces");
    if(1==getch("stat_good","s",temp_ch)){
         auxputch("junk","d",&impi,temp_ch);
    }
  }
   
sep_mpi_stop();
MPI_Finalize();
 

  return(0);
}

int transfer_sect(int isect,sep3d *big, distrib *spread, int nh, int *nsect,
 int *fsect, sep3d  *small, int *nout, int *fout)
{
  int *headers;
  int *coords;
  int ih,idim,nd,iax,i;

  for(idim=0; idim < big->ndims; idim++){
    big->nwind[idim]=nsect[idim];
    big->fwind[idim]=fsect[idim];
    big->jwind[idim]=1;
  }
  if(nh>0){
    if(big->nkeys >0){
       headers=(int*)malloc(sizeof(int)*big->nkeys*nh);

       if(0!=sep3dc_grab_header_block(small,headers))
         return(sepwarn(NOT_MET,"trouble grabbing headers"));

       if(0!=sep3dc_set_header_block(big,headers))
         return(sepwarn(NOT_MET,"trouble setting header block"));
       free(headers);
    }

    nd=big->ndims-1;
    coords=(int*)malloc(sizeof(int)*nd*nh);
    if(0!=sep3dc_grab_coord_vals(small,coords))
      return(sepwarn(NOT_MET,"trouble grabbing coords"));
    for(ih=0; ih < nh; ih++){
      for(idim=0; idim <spread->ndim ; idim++){
        iax=spread->dff_axis[idim]-1;
        i=ih*nd+iax;
        coords[i]=coords[i]+spread->axis_beg[isect][idim];
      }
    }
    if(0!=sep3dc_set_ncoord(big,nh))
      return(sepwarn(NOT_MET,"trouble setting number of coords"));
    if(0!=sep3dc_set_coord_vals(big,coords))
      return(sepwarn(NOT_MET,"trouble grabbing coords"));
   free(coords);
  }
  sep3d_set_sep3d(small);
  return(0);
}


int pass_add_data(int impi,float *data, int n1, int n2,int ifrom, int ito){
  int to_do,done;
  int block,i;
  MPI_Status status;
  float *buf2,*pass;
                                                                                      
  done=0;
  to_do=n1*n2;

 if(impi==ito) {
   buf2=(float*)malloc(sizeof(float)*n1*n2);
   pass=buf2;
 }
 else pass=data; 
                                                                                      
  while (done < to_do){
    block=MIN(to_do-done,10000000);
    if(ifrom==impi)
      MPI_Send((data+done) , block, MPI_FLOAT, ito, 2333, MPI_COMM_WORLD);
    if(ito==impi)
      MPI_Recv((buf2+done), block, MPI_FLOAT, ifrom, 2333, MPI_COMM_WORLD,&status);
    done+=block;
  }
  if(ito==impi){
    for(i=0; i < n1*n2; i++) data[i]+=buf2[i];
    free(buf2);
  }
  return(0);
}
void init_mpi_seplib(int argc, char **argv)
{
  int impi,nmpi,i;
                                                                                             
  MPI_Init(&argc,&argv);
  initpar(argc,argv);
  MPI_Comm_size(MPI_COMM_WORLD,&nmpi);
  MPI_Comm_rank(MPI_COMM_WORLD,&impi);
  if (impi==0) mpi_sep_send_args(nmpi,10,0);
  else mpi_sep_receive_args();
                                                                                             
  init_3d();
  doc(SOURCE);
                                                                                             
}
