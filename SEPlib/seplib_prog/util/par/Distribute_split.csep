/*
=head1 NAME






=cut
*/


#include<seplib.h>
#include<sep3dc.h>
#include<sepaux.h>
#include<superset.h>
#include<sep_par.h>
#ifndef SEPNULL2
#define SEPNULL2 ((void *) 0)
#endif
#include<mpi.h>




#define HEAD "/dev/null"
  ADD_DEF_SEP_DOC

int localize_sep3d(int iown, distrib *spread, sep3d *combo, sep3d *local);
int transfer_sect(int isect,sep3d *big,distrib *spread,int nh, int *nsect, 
   int *fsect, sep3d  *small, int *nout, int *fout);
int pass_data(int impi,char *data, int n1, int n2,int ifrom, int ito);

void init_mpi_seplib(int argc, char **argv);
int main(int argc, char **argv){
  int nblock[9],dff_axis[9];
  sep3d data,*sects,*sects_in;
  int impi;
  distrib spread,spread_in;
  int *fwind,*jwind,*nwind;
  int *fsect,*nsect;
  int *fout,*nout;
  int isect,ierr,ia,i,verb;
  int max_size,esize,nh,ipt,wh,wg,e2,input_spread,n123;
  float *buf,*buf2,*buf3;
  char temp_ch[1204];
  MPI_Status status;

  init_mpi_seplib(argc,argv);
  if(0!=get_distrib_info(&spread,1,"out_"))
    seperr("trouble getting distribution information");

  impi=sep_thread_num();


  /*get the input info*/
  if(0==getch("input_spread","d",&input_spread)) input_spread=0;
  if(input_spread==1) {
    /*if the input is spread across many nodes*/
    if(0!=get_distrib_info(&spread_in,0,"in_"))
        seperr("trouble getting distribution information for input");
    sects_in=(sep3d*)malloc(sizeof(sep3d)*spread_in.nown);

    if(0!= create_global_file(&spread_in,sects_in,&data))
      seperr("trouble creating global files");
  }
  else{ 
    /*if the input is one the master node*/
    if(impi==0)
      if(0!= init_sep3d_tag("combo",&data,"SCRATCH"))
         return(sepwarn(NOT_MET,"trouble initializing input \n"));
     if(0!=sep3dc_broadcast_headers(&data,0))
      return(sepwarn(NOT_MET,"trouble broadcasting headers\n"));
  }
  

  /*calc output sections */
  if(0!=calc_sections( &data, &spread))
    return(sepwarn(NOT_MET,"trouble calculating sections"));

  /*create the local output files*/
  sects=(sep3d*)malloc(sizeof(sep3d)*spread.nown);
  for(isect=0; isect < spread.nown; isect++){
    if(0!=localize_sep3d(spread.iown[isect],&spread,&data,&sects[isect]))
      seperr("trouble localizing struct");
    if(impi!=0){
      auxout(spread.tag_sect[spread.iown[isect]]);
      auxclose(spread.tag_sect[spread.iown[isect]]);
      if(0!=sep3dc_write_description(spread.tag_sect[spread.iown[isect]],
        &sects[isect])) 
         seperr("trouble writing description for %s",
           spread.tag_sect[spread.iown[isect]]);
    }
  }

  if(data.file_format[0]=='R') {wh=0; wg=0;}
  else seperr("Distribute_split only works a regular dataset");


  nwind=(int*) malloc(sizeof(int)*data.ndims);
  fwind=(int*) malloc(sizeof(int)*data.ndims);
  jwind=(int*) malloc(sizeof(int)*data.ndims);
  nsect=(int*) malloc(sizeof(int)*data.ndims);
  fsect=(int*) malloc(sizeof(int)*data.ndims);
  nout=(int*) malloc(sizeof(int)*data.ndims);
  fout=(int*) malloc(sizeof(int)*data.ndims);
  for(i=0; i < data.ndims; i++) jwind[i]=1;

  if(0==getch("verb","d",&verb)) verb=0;
  if(0==getch("max_size","d",&max_size)) max_size=200;
  esize=sep3dc_get_esize(&data);
  e2=esize/4;
  max_size=max_size*1000000/esize/3;
  init_loop_calc(data.ndims,data.n,"MAIN",max_size);


  while(0==do_sep_loop("MAIN",nwind,fwind)){
    for(ia=0; ia <spread.nsect; ia++){
      isect=ia;
      ierr=local_window(isect,&data,&spread,nwind,fwind,nsect,fsect,nout,fout);
      if(ierr==0){
        ipt=spread.ilocal_pt[ia];
        if(verb==1 && impi==0) {
           fprintf(stderr,"Window sect=%d ",isect);
           for(i=0; i< data.ndims;i++)
             fprintf(stderr,"n%d=%d f%d=%d ",i+1,nwind[i],i+1,fwind[i]);
           fprintf(stderr,"\n");
        }
        for(i=1,nh=1; i < data.ndims;i++) nh=nh*nwind[i];
        n123=nh*nwind[0];

        buf=(float*)malloc(e2*nh*nsect[0]*sizeof(float));
        buf2=(float*)malloc(e2*nh*nsect[0]*sizeof(float));
        buf3=(float*)malloc(e2*nh*nsect[0]*sizeof(float));
        if(input_spread==0){
          if(impi==0){
            if(0!=sep3dc_read_data("combo", &data,(void*)buf,nsect[0],
              fsect[0],jwind[0])) seperr("trouble reading data");
          } 
        }
        else{
          /*load the local  datasets*/
          if(0!=read_local_datasets(sects_in,&data,&spread_in,nwind,fwind,buf,buf2,buf3));
            seperr("trouble reading in local datasets");
                                                                                              
          if(0!=combo_data(impi,sep_num_thread(),buf,buf2,n123))
             seperr("trouble combining data");
        }
        if(0!=pass_data(impi,(char*)buf,esize*nsect[0],nh,0,spread.sect_thread[ia]))
          seperr("trouble passing data");
        if(0!=impi){
          if(0!= sep3dc_write_data(spread.tag_sect[isect],&sects[ipt],
            (void*)buf,nout,fout, jwind,nh,wh,wg)) 
             seperr("trouble writing outing data");
        }
        if(nh>0) {free(buf); free(buf2); free(buf3);}
      } 
    }
  }

  if(impi!=0){
    for(i=0; i < spread.nown; i++){
     if(0!=sep3dc_update_ntraces(&sects[i]))
        seperr("trouble updating traces");
     if(0!=sep3d_rite_num_traces(spread.tag_sect[spread.iown[i]],&sects[i]))
        seperr("trouble writing number of traces");
    }
  }
   
 if(impi==0){
   if(1==getch("stat_good","s",temp_ch)){
      auxputch("junk","d",&impi,temp_ch);
   }
 } 
 MPI_Finalize();


  return(0);
}

int transfer_sect(int isect,sep3d *big, distrib *spread, int nh, int *nsect,
 int *fsect, sep3d  *small, int *nout, int *fout)
{
  int *headers;
  int *coords;
  int ih,idim,nd,iax,i;

  for(idim=0; idim < big->ndims; idim++){
    small->nwind[idim]=nout[idim];
    small->fwind[idim]=fout[idim];
    small->jwind[idim]=1;
  }
  if(nh>0){
    if(big->nkeys >0){
       headers=(int*)malloc(sizeof(int)*big->nkeys*nh);

       if(0!=sep3dc_grab_header_block(big,headers))
         return(sepwarn(NOT_MET,"trouble grabbing headers"));

       if(0!=sep3dc_set_header_block(small,headers))
         return(sepwarn(NOT_MET,"trouble setting header block"));
       free(headers);
    }

    nd=big->ndims-1;
    coords=(int*)malloc(sizeof(int)*nd*nh);
    if(0!=sep3dc_grab_coord_vals(big,coords))
      return(sepwarn(NOT_MET,"trouble grabbing coords"));
    for(ih=0; ih < nh; ih++){
      for(idim=0; idim <spread->ndim ; idim++){
        iax=spread->dff_axis[idim]-1;
        i=ih*nd+iax;
        coords[i]=coords[i]-spread->axis_beg[isect][idim];
      }
    }
    if(0!=sep3dc_set_ncoord(small,nh))
      return(sepwarn(NOT_MET,"trouble setting number of coords"));
    if(0!=sep3dc_set_coord_vals(small,coords))
      return(sepwarn(NOT_MET,"trouble grabbing coords"));
   free(coords);
  }
  sep3d_set_sep3d(small);
  return(0);
}


int localize_sep3d(int iown, distrib *spread, sep3d *combo, sep3d *local)
{
  int idim,iax;

  if(0!=init_sep3d_struct(*combo,local,"SCRATCH"))
   seperr("trouble initializing section");

  for(idim=0; idim < spread->ndim; idim++){
    iax=spread->dff_axis[idim];
    local->o[iax]+=local->d[iax]*spread->axis_beg[iown][idim];
    local->n[iax]=spread->axis_end[iown][idim]-spread->axis_beg[iown][idim]+1;
  }
  sep3d_set_sep3d(local);
  return(0);
}

int pass_data(int impi,char *data, int n1, int n2,int ifrom, int ito){
  int to_do,done;
  int block;
  MPI_Status status;
                                                                                      
  done=0;
  to_do=n1*n2;
                                                                                      
  while (done< to_do){
    block=MIN(to_do-done,10000000);
    if(ifrom==impi)
      MPI_Send((data+done) , block, MPI_CHAR, ito, 2333, MPI_COMM_WORLD);
    if(ito==impi)
      MPI_Recv((data+done), block, MPI_CHAR, ifrom, 2333,
        MPI_COMM_WORLD,&status);
    done+=(double)block;
  }
  return(0);
}

void init_mpi_seplib(int argc, char **argv)
{
  int impi,nmpi;
                                                                                             
  MPI_Init(&argc,&argv);
  initpar(argc,argv);
  MPI_Comm_size(MPI_COMM_WORLD,&nmpi);
  MPI_Comm_rank(MPI_COMM_WORLD,&impi);
  if (impi==0) mpi_sep_send_args(nmpi,10,0);
  else mpi_sep_receive_args();
                                                                                             
  init_3d();
  doc(SOURCE);
                                                                                             
}

