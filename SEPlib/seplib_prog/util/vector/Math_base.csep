/*$

=head1 NAME

Math  - Perform mathematical operations on data

=head1 SYNOPSIS

Math  pars >out.H    [pars]        Generic math routine

Rtoc  <in.H >out.H   [pars]        Real to complex

Cmplx  real.H imag.H >out.H [pars] Form complex from two files

Real  <in.H  >out.H  [pars]        Output just real part of complex file

Imag  <in.H  >out.H  [pars]        Output just imaginary part of complex file

Conj  <in.H  >out.H  [pars]        Form the conjugate of a complex number  

Cabs  <in.H  >out.H  [pars]        Output absolute value of complex number

Cabs2 <in.H  >out.H  [pars]        Output absolute value^2 of complex number

Pow   <in.H  >out.H pow=  [pars]   Data raised to power, sign preserved

Gpow <in.H >out.H gpow= [pars]  Data raised to power gpow

Add   file1.H file2.H file3.H mode=[sum],prod,div > out.H Add, multiply, or divide  datasets


=head1 INPUT PARAMETERS

=head2 Math

=over 4

=item exp      - char*  

      [file1] Expression to perfom on history files

=item file[1..10] - sepfile 

      [in]  Name of this history file

=item exp_real - char*   

      [exp]   If complex function for the real values

=item exp_imag - char*   

      [exp]   If complex function for the imaginary values

=item to_stdout - int

       [1] Whether to write the output to stdout (1) or to the first file(0)

=item sum_axis - int

       [0] Whether (1) or not (0) to sum the result of the expresion
        
          and output  (form sum_totr=%g and sum_toti=%g if applicable 

          to stdout) rather than

          write out the vector. Useful for dot products among other things

=back

=head2 Pow

=over 4

=item pow      -  float          

      Power to raise data to

=back 

=head2 Gpow

=over 4

=item gpow      -  float          

      Power to raise data to

=back

=head2 Generic parameters

=over 4

=item maxsize  -    int     

      [100]   Maximum amount of memory to consume

=item verb     -    int     

      [0]    Whether or not to be verbose

=back

=head1 DESCRIPTION

Performs mathematical operation of seplib files

Supported Functions (specified by @ at begining):

COS SIN TAN
ACOS  ASIN  ATAN
COSH  SINH  INT
EXP LOG SQRT
ABS SGN



Example 1:  Add two real files
Math  file1=in file2=out2.H exp=file1+file2 >out.H

Example 2: Tpow (2.) on one file
Math exp='file1^2' >out.H

Example 3: Multiply two complex files
Math  file1=a.H file2=b.H exp_real='file1.re*file2.re-file1.im*file2.im' 
  exp_imag='file1.re*file2.im+file1.im*file2.re'



=head2 NOTES

Math is not automatically complex aware.
If you are doing addition,subtraction with files it
will do the right thing. If you are trying to multiplication
or division you need to code the exp_real and exp_imag yourself.
If you are using it with the old 'Add' functionality it will
do the correct thing.

For most cases you can just go
Math exp='a.H+b.H' >c.H 

Math is just a script interface Math_base the real workhorse

=head1 SEE ALSO

L<Clip>,L<Add>


=head1 CATEGORY

B<util/vector>

=cut


>*/ 
/*
-------------------------------------------------

Author: Robert Clapp, ESMB 463, 7230253

Date Created:Fri Jul 30 22:10:30 PDT 1999

Purpose: 

*/   
#include <stdlib.h>
#include <seplib.h> 
#include <sep3d.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#include <sys/stat.h>


struct _seek_info{
  char tag[1024];
  int amount;
};
typedef struct _seek_info seek_info;
                                                                                



#define MAX_EXP_LEN 8192
#define MAX_FILES 100

extern int      sepxargc;
extern char   **sepxargv;



#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
void seek_it(void *ss);
int grab_pars(char *exp, int *verb, int *maxsize);
int  check_consistent();
int modify_exp(int *eout,char **argv,char *exp,char *exp_real,char *exp_imag);
int real_eval(char *name,double *value);
int get_real(char *name,int nloc,double *value);
void clean_string(char *string);
int get_complex(char *name,int nloc,double *value);
void make_term(char *myexp,int *first, char *type, int *index,int sign);
void complex_string(char *exp_out,char *exp_in,char *add);
int is_num(char f);
int apply_axis(int nloc,double *value);
_XFUNCPROTOEND
#else
int grab_pars();
int  check_consistent();
int modify_exp();
int real_eval();
int clean_strng();
int get_real();
int get_complex();
#endif

int nd[9],n1,unit,first,ndim,n;
float o1,d1;
double *array;
float *buf_in,od[9],dd[9];
char files[MAX_FILES][256];
int nfiles,done,nblock,ioff,esize[MAX_FILES],begin[MAX_FILES];
int to_stdout,sum_axis;
char out_tag[256];




#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int main (int argc, char **argv, char **envp)
_XFUNCPROTOEND
#else
main (argc, argv, envp)
int             argc;;
char          **argv, **envp;
#endif
{
  extern int      sepxargc;
  extern char   **sepxargv;
  char exp[MAX_EXP_LEN],exp_real[MAX_EXP_LEN],exp_imag[MAX_EXP_LEN],temp_ch[MAX_EXP_LEN];
  char temp2_ch[MAX_EXP_LEN];
  int  eout,maxsize;
  int  verb,i2,i1,max_block,i;
  float *buf_out;
  double sum_totr=0.,sum_toti=0.;
  int using[MAX_FILES];
  seek_info seekit;
  initpar( argc, argv );
  sep_begin_prog();
ADD_SEP_DOC
  doc(SOURCE);




  grab_pars(exp,&verb,&maxsize);
  modify_exp(&eout,sepxargv,exp,exp_real,exp_imag);

  putch("esize","d",&eout);
  check_consistent();
  if(eout==4){
    sprintf(temp_ch,"#Using %s to produce real data\n",exp);
    putlin(temp_ch);
    if(verb==1) fprintf(stderr,"%s\n",temp_ch);
  }    
  
  else if(eout==8){
    sprintf(temp_ch,"#Using %s to produce real portion\n",exp_real);
    if(verb==1) fprintf(stderr,"%s\n",temp_ch);
    putlin(temp_ch);
    sprintf(temp_ch,"#Using %s to produce imaginary portion\n",exp_imag);
    if(verb==1) fprintf(stderr,"%s\n",temp_ch);
    putlin(temp_ch);
  }


  unit=0;for(i=0;i<nfiles;i++){
     unit=unit+esize[i];sprintf(temp_ch,"file%d",i+1);
     sprintf(temp2_ch,"#%s",temp_ch);
    putch(temp2_ch,"s",files[i]);
  }
/*  hclose();*/
  max_block=maxsize/(n1*(unit+eout+2*sizeof(double)));


  if(max_block<1) seperr("maxsize not big enough to hold single trace\n");
  if(max_block>n) max_block=n;

  buf_out=(float*) malloc(max_block*sizeof(float)*n1*eout);
/*  buf_in=(float*) malloc(max_block*sizeof(float)*n1*unit);*/
  buf_in=(float*) malloc(max_block*n1*unit);
  

   if(eout==4){
     for(i=0; i < nfiles; i++){
       sprintf(temp2_ch,"file%d",i+1);
       if(NULL==strstr(exp,temp2_ch)) using[i]=0;
       else  using[i]=1;
     }
   }
   else{
     for(i=0; i < nfiles; i++){
       sprintf(temp2_ch,"file%d",i+1);
       if(NULL==strstr(exp_real,temp2_ch) && 
         NULL==strstr(exp_imag,temp2_ch)) using[i]=0;
       else  using[i]=1;
     }
   }

   

   array=(double*)malloc(max_block*n1*sizeof(double));

  done=0;
  while(done<n){ /*loop until we have processewd all the traces */
    nblock=MIN(max_block,n-done);
    if(verb==1) fprintf(stderr,"working on %d through %d of %d\n",
     done,nblock+done,n);


    /*first read in a block from all the files */
    begin[0]=0;
    for(i=0;i<nfiles;i++){
      if(using[i]==1){
        if(esize[i]*n1*nblock!=sreed(files[i],(buf_in+begin[i]),
         esize[i]*n1*nblock)) seperr("trouble reading from %s\n",files[i]);
      }
      begin[i+1]=begin[i]+esize[i]/4*n1*nblock;
    }
    /*rewind the file if necessary*/
    if (to_stdout==0 && using[0]==1 && sum_axis==0){
       seekit.amount=-eout*n1*nblock;
       strcpy(seekit.tag,out_tag);
      seek_it((void*)&seekit);
    }
    if(eout==4){
      if(0!=evaluate_expression(exp,real_eval,nblock*n1,array))
        seperr("trouble evaluating expression \n");
      for(i=0;i<nblock*n1;i++) buf_out[i]=(float)array[i];
      if(sum_axis==1){
        for(i=0; i< nblock*n1;i++) sum_totr+=array[i];
      }
      else{
        if(eout*n1*nblock!=srite(out_tag,buf_out,eout*n1*nblock))
          seperr("trouble writing block \n");
      }
    }
    else{
      ioff=0;
      if(0!=evaluate_expression(exp_real,real_eval,nblock*n1,array))
        seperr("trouble evaluating expression \n");
      for(i=0; i< nblock*n1;i++) buf_out[i*2]=array[i];
      if(sum_axis==1)
        for(i=0; i< nblock*n1;i++) sum_totr+=array[i];
      
      ioff=1;
      if(0!=evaluate_expression(exp_imag,real_eval,nblock*n1,array))
        seperr("trouble evaluating expression \n");
      for(i=0; i< nblock*n1;i++) buf_out[i*2+1]=array[i];
      if(sum_axis==1){
        for(i=0; i< nblock*n1;i++) sum_toti+=array[i];
      }
      else{
        if(eout*n1*nblock!=srite(out_tag,buf_out,eout*n1*nblock))
          seperr("trouble writing block \n");
      }
    }
    done+=nblock;
  }
  if(sum_axis==1){
   sprintf(temp2_ch,"sum_totr=%g",sum_totr);
   putlin(temp2_ch);
   if(eout==8)
     sprintf(temp2_ch,"sum_toti=%g",sum_toti);
     putlin(temp2_ch);
  }
  
  

sep_end_prog();
return(EXIT_SUCCESS);

}

#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int grab_pars(char *exp, int *verb, int *maxsize)
_XFUNCPROTOEND
#else
int grab_pars(exp,verb,maxsize)
char  *exp; int *verb; int *maxsize;
#endif
{
char temp_ch[MAX_EXP_LEN];
int i;
struct stat sfd;  /* for passed fd  */


if(0==getch("to_stdout","d",&to_stdout)) to_stdout=1;
if(0==getch("sum_axis","d",&sum_axis)) sum_axis=0;


/*FILE *instream;*/
/*instream=input();*/

i=0;

nfiles=0;
if (-1 != fstat(fileno(stdin), &sfd)){
  if ((sfd.st_mode & S_IFMT) == S_IFREG) {
     strcpy(files[0],"in");
     nfiles=1;
  }
}

sprintf(temp_ch,"file%d",i+1);
while(i<=MAX_FILES  && 1==getch(temp_ch,"s",files[i])){
  i++;
  sprintf(temp_ch,"file%d",i+1);
}
nfiles=i+nfiles;

if(0==getch("exp","s",exp)){
  if(0==getch("eqn","s",exp)) strcpy(exp,files[0]);
}

if(0==getch("verb","d",verb)) *verb=0;
if(0==getch("maxsize","d",maxsize)) *maxsize=200;
*maxsize=(*maxsize)*1000000;
return(0);
}


#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int  check_consistent()
_XFUNCPROTOEND
#else
int  check_consistent()
#endif
{
int i1,i,i2,tempi,nhold,es;
char temp_ch[128],temp2_ch[128];


  if(0!=strcmp(files[0],"in")){
    sprintf(temp_ch,"stdin=%s",files[0]);
    getch_add_string(temp_ch);
  }

if(to_stdout==0  && 0==strcmp(files[0],"in"))
  seperr("if the first file is stdin to_sdout must equal 1");
if(to_stdout==0){ auxclose(files[0]); auxinout(files[0]);}
if(0!=sep_get_number_data_axes(files[0],&ndim))
  seperr("trouble getting number of data axes from tag=%s \n",files[0]);
if(0==auxpar("esize","d",&esize[0],files[0])) esize[0]=4;

for(i2=1;i2<nfiles;i2++){
  if(0!=sep_get_number_data_axes(files[i2],&tempi))
    seperr("trouble getting number of data axes from tag=%s \n",files[i2]);
  if(tempi!=ndim)
    seperr("incompatible number of dimensions for %s=%d  and %s=%d \n",
     files[0],ndim,files[i2],tempi);
  if(0==auxpar("esize","d",&esize[i2],files[0])) esize[i2]=4;
}

for(i2=0;i2<nfiles;i2++){
  if(esize[i2]!=4 && esize[i2]!=8) 
    seperr("can only handle real and complex data \n");
  sprintf(temp_ch,"file%d",i2+1);
}
 
n=1;
for(i1=1; i1 <= ndim; i1++){
  sprintf(temp_ch,"n%d",i1);
  if(0==auxpar(temp_ch,"d",&nhold,files[0])) 
    seperr("trouble grabbing %s from %s\n", temp_ch,files[0]);

   if(0!=sep_get_data_axis_par(files[0],&i1,&nd[i1-1],&od[i1-1],
     &dd[i1-1],temp2_ch))
    seperr("trouble grabbing axis =%d from %s\n",i1,files[0]);

    if(i1==1) n1=nd[0];
    else n=n*nd[i1-1];
    for(i2=1;i2<nfiles;i2++){
      if(0==auxpar(temp_ch,"d",&tempi,files[i2])) 
        seperr("trouble grabbing %s from %s\n", files[i2],temp_ch);
      if(tempi!=nd[i1-1])
        seperr("unequal dimensions,  axis=%d %s=%d to %s=%d \n",i1,
          files[0],nhold,files[i2],tempi);
    }
}
    
if(0!=auxpar("o1","f",&o1,files[0])) o1=0.;  
if(0!=auxpar("d1","f",&d1,files[0])) d1=1.;  

if(to_stdout==1) strcpy(out_tag,"out");
else strcpy(out_tag,files[0]);
 
return(0);
} 
#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int modify_exp(int *eout,char **argv,char *exp,char *exp_real,char *exp_imag)
_XFUNCPROTOEND
#else
int modify_exp(eout,argv,exp,exp_real,exp_imag)
int *eout;char *exp,**argv;char *exp_real, *exp_imag;
#endif
{
int imag,real,tempi;
char *name;
char temp_ch[MAX_EXP_LEN],type[2];
float tempr,scale2;
float scale[MAX_FILES*2];
float add[MAX_FILES*2];
int i,esize,one;
int n,j,sign;
int nsz[MAX_FILES],index[MAX_FILES];
int ifirst_re,ifirst_im;


if (NULL == (name = strrchr(argv[0], '/'))) name=argv[0];
else name++;


if(0==strcmp(name,"Cmplx")){
  nfiles=2; 
  strcpy(files[0],"in");
  strcpy(files[1],argv[2]);
  strcpy(exp_real,"file1");
  strcpy(exp_imag,"file2");
  sprintf(temp_ch,"stdin=%s",argv[1]);
  getch_add_string(temp_ch);
  if(0==auxpar("esize","d",&tempi,"in")) tempi=4; 
  if(tempi!=4) seperr("invalid data set,%s, real portion must have esize=4\n",
   argv[1]);
  if(0==auxpar("esize","d",&tempi,argv[2])) tempi=4; 
  if(tempi!=4) seperr("invalid data set,%s, imag portion must have esize=4\n",
   argv[2]);
  *eout=8;
}
else if(0==strcmp(name,"Gpow")){
  nfiles=1; 
  strcpy(files[0],"in");
  *eout=4;
  if(getch("gpow","f",&tempr)==0) seperr("Must supply pow \n");
  sprintf(exp,"file1^%f",tempr);
  if(0==auxpar("esize","d",&tempi,"in")) tempi=4; 
  if(tempi!=4) seperr("invalid data set input must have esize=4\n");
}
else if(0==strcmp(name,"Pow")){
  nfiles=1; 
  strcpy(files[0],"in");
  *eout=4;
  if(getch("pow","f",&tempr)==0) seperr("Must supply pow \n");
  sprintf(exp,"@SGN(file1)*file1^%f",tempr);
  if(0==auxpar("esize","d",&tempi,"in")) tempi=4; 
  if(tempi!=4) seperr("invalid data set input must have esize=4\n");
}
else if(0==strcmp(name,"Tpow")){
}
else if(0==strcmp(name,"Real")){
  nfiles=1; 
  strcpy(files[0],"in");
  strcpy(exp,"file1.re");
  *eout=4;
  if(0==auxpar("esize","d",&tempi,"in")) tempi=4; 
  if(tempi!=8) seperr("invalid data set input must have esize=8\n");
}
else if(0==strcmp(name,"Cabs2")){
  nfiles=1; 
  strcpy(files[0],"in");
  strcpy(exp,"file1.im^2+file1.re^2");
  *eout=4;
  if(0==auxpar("esize","d",&tempi,"in")) tempi=4; 
  if(tempi!=8) seperr("invalid data set input must have esize=8\n");
}
else if(0==strcmp(name,"Cabs")){
  nfiles=1; 
  strcpy(files[0],"in");
  strcpy(exp,"@SQRT(file1.im^2+file1.re^2)");
  *eout=4;
  if(0==auxpar("esize","d",&tempi,"in")) tempi=4; 
  if(tempi!=8) seperr("invalid data set input must have esize=8\n");
}
else if(0==strcmp(name,"Imag")){
  nfiles=1; 
  strcpy(files[0],"in");
  strcpy(exp,"file1.im");
  *eout=4;
  if(0==auxpar("esize","d",&tempi,"in")) tempi=4; 
  if(tempi!=8) seperr("invalid data set input must have esize=8\n");
}
else if(0==strcmp(name,"Conj")){
  if(0==auxpar("esize","d",&tempi,"in")) tempi=4; 
  if(tempi!=8) seperr("invalid data set input must have esize=8\n");
  nfiles=1; 
  strcpy(files[0],"in");
  strcpy(exp_real,"file1.re");
  strcpy(exp_imag,"file1.im*(-1.0)");
  *eout=8;
}
else if(0==strcmp(name,"Add")){
   /*get operation character*/
   if(0==getch("mode","s",temp_ch)) strcpy(temp_ch,"sum");
   if(temp_ch[0]=='s') strcpy(type,"+");
   if(temp_ch[0]=='p') strcpy(type,"*");
   if(temp_ch[0]=='m') strcpy(type,"*");
   if(temp_ch[0]=='d') strcpy(type,"/");
   /*get scale parameter*/
   for(i=0; i < MAX_FILES;i++) scale[i]=1.;
   getch("scale","f",scale);
   for (i = 1; i < sepxargc; ++i){
     if (0 == strchr (sepxargv[i], '=')){
       strcpy(files[nfiles],sepxargv[i]);
       nfiles++;
     }
   }
  
  if(nfiles==0) { nfiles=1; strcpy(files[0],"in"); }
  if(0!=strcmp(files[0],"in")){
    sprintf(temp_ch,"stdin=%s",files[0]);
    getch_add_string(temp_ch);
  }
   if(0==auxpar("esize","d",&esize,files[0])) esize=4;
    for(i=0;i < nfiles; i++) add[i]=0.;
     getch("add","f",add);
   *eout=esize;
   if(esize==4){
      sprintf(exp,"(%24.12f*(%s+%24.12f))",scale[0],"file1",add[0]);
      for(i=1; i < nfiles; i++){
        sprintf(temp_ch,"%c(%24.12f*(%s%d+%24.12f))",type[0],scale[i],"file",i+1,add[i]);
        strcat(exp,temp_ch);
      }
    }
   else{
       if(0==strcmp(temp_ch,"add")) seperr("Add mode=add for complex unimplented\n");
     if(type[0]=='+'){
      sprintf(exp_real,"(%24.12f*(%s.re+%24.12f))",scale[0],"file1",add[0]);
      sprintf(exp_imag,"(%24.12f*(%s.im+%24.12f))",scale[1],"file1",add[1]);
      for(i=1; i < nfiles; i++){
        sprintf(temp_ch,"%c(%24.12f*(%s%d.re+%24.12f))",type[0],scale[i*2],"file",i+1,add[i*2]);
        strcat(exp_real,temp_ch);
        sprintf(temp_ch,"%c(%24.12f*(%s%d.im+%24.12f))",type[0],scale[i*2+1],"file",i+1,add[i*2+1]);
        strcat(exp_imag,temp_ch);
      }
    }
    else{
       /*( a1 + ib1 ) (a2 +ib2) ...  2^nfile terms */
       n=(int)pow(2.,(double)nfiles);
       for(i=0; i < nfiles; i++) nsz[i]=2;
       scale2=1.;for(i=0; i < nfiles; i++) scale2=scale[i]*scale2;
       if(type[0]=='/') scale2=(1./ (scale2/(scale[0]*scale[0])));
       sprintf(exp_real,"(%24.12f)*(",scale2); sprintf(exp_imag,"(%24.12f)*(",scale2);

       ifirst_re=0;ifirst_im=0;
       /*loop through terms*/
       for(i=0; i < n; i++){
         h2c(i,nsz,nfiles,index);
         /*figure out how many of this term are imaginary*/
         sign=0;
         for(j=0; j< nfiles; j++){
           if(index[j]==1) sign++;
         }
         if(sign%2==0)  /*this term is real*/
           make_term(exp_real,&ifirst_re,type,index,sign);
         else
           make_term(exp_imag,&ifirst_im,type,index,sign);

       }
       strcat(exp_real,")");
       strcat(exp_imag,")");
     *eout=8;
    }
   }
   if(*eout==4)  clean_string(exp);
   else { clean_string(exp_real); clean_string(exp_imag);}
}
else if(0==strcmp(name,"Rtoc")){
  nfiles=1; 
  strcpy(files[0],"in");
  strcpy(exp_real,"file1");
  strcpy(exp_imag,"0.");
  *eout=8;
  if(0==auxpar("esize","d",&tempi,"in")) tempi=4; 
  if(tempi!=4) seperr("invalid data set input must have esize=4\n");
}
else{
  one=getch("exp","s",temp_ch);
  if(one==0) one=getch("eqn","s",temp_ch);
  imag=getch("exp_imag","s",exp_imag);
  real=getch("exp_real","s",exp_real);
  if(0!=strcmp(files[0],"in")){
    sprintf(temp_ch,"stdin=%s",files[0]);
    getch_add_string(temp_ch);
  }
  if(auxpar("esize","d",&esize,files[0])==0) esize=4;
  if(1==getch("eout","d",eout)){
     if(esize==8){
       if(imag==0)  complex_string(exp_imag,exp,"im");
       if(real==0)  complex_string(exp_real,exp,"re");
     }
   }
   else{  
     *eout=esize;
     if(*eout==8){
       if(imag==0)  complex_string(exp_imag,exp,"im");
       if(real==0)  complex_string(exp_real,exp,"re");
     }
   }
}


return(0);

}
#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
void clean_string(char *string)
_XFUNCPROTOEND
#else
void clean_string(char *string)
char *string;
#endif
{
char temp_ch[MAX_EXP_LEN];
int i,j;
strcpy(temp_ch,string);
strcpy(string,"  ");
for (i=0,j=0; i < strlen(temp_ch); i++){
  if(temp_ch[i]!=' '){
     string[j]=temp_ch[i]; j++;
  }
} 
string[j]='\0';

}
int i,nloc,i2,nsz,off,inum;
#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int real_eval(char *name,double *value)
_XFUNCPROTOEND
#else
int real_eval(name,value)
char *name;
double *value;
#endif
{
int i,nloc,i2,nsz,off,inum;
char f;
char temp[5];


for(i=0; i < 4; i++) temp[i]=name[i];
temp[4]='\0';




nsz=(int)strlen(name);
nloc=is_num(name[4]);

if(nsz==5 && 0==strcmp("axis",temp) && nloc >=0){
  if(nloc < ndim){
    if(0!=apply_axis(nloc,value)){
      seperr("trouble applying axis scaling \n");
    }
  }
  else seperr("Unrecognized expression0=%s \n",name);
}
else if((nsz==5 || nsz==6 || nsz==9|| nsz==8 )&& is_num>=0 &&
    0==strcmp("file",temp)){
    if(nloc>=nfiles) seperr("Invalid expresion1, unrecognized name=%s %d,%d \n",name,nloc,nfiles);
    if(esize[nloc]==4){
      if(nsz==8) seperr("Invalid expression2, unrecognized name=%s \n",name);
      if(0!=get_real(name,nloc,value)) seperr("trouble getting real data \n");
    }
    else{
      if(0!=get_complex(name,nloc,value))
        seperr("trouble getting complex data \n");
    }
}
else seperr("Invalid expresion4, unrecognized name=%s \n",name);

return(0);
}

int apply_axis(int nloc,double *value){
double *axis;
int  i1,ib,iaxis,ia,i,j;
int id[9],nupdate,iupdate;
axis=(double*)malloc(sizeof(double)*nd[nloc]);
for(iaxis=0;iaxis<nd[nloc]; iaxis++) axis[iaxis]=od[nloc]+dd[nloc]*iaxis;

if(nloc==0){ /*special case first axis*/
  for(ia=0,i=0;ia<nblock;ia++){
   for(i1=0; i1 < n1; i1++,i++){
     value[i]=axis[i1];
   }
  }
}
else{
  h2c(done,&nd[1],ndim-1,id);/* get the starting location along the axis*/
  nupdate=1;iupdate=0;
  for(i=1;i < nloc; i++){
     iupdate+=nupdate*id[i-1]; /*we are currently at this position*/
     nupdate=nupdate*nd[i]; /*we go nsteps before changing axis value*/
  } 
   for(ia=0,i=0,j=id[nloc-1];ia<nblock;ia++){
     for(i1=0; i1 < n1; i1++,i++){
       value[i]=axis[j]; 
     }
     iupdate++; 
     if(iupdate==nupdate){ /*we have reached the end of all intermediate axes*/
       j++; iupdate=0;
       if(j==nd[nloc]) j=0;
     }
   }
}

free(axis);
return(0);
}

int is_num(char f){
char g[2];
int nloc;
g[0]=f;g[1]='\0';

if(f=='1' || f=='2' || f=='3' ||
 f=='4' || f=='5' || f=='6' || f=='7' || f=='8' || f=='9'){
    nloc=atoi(g);
   return(nloc-1);
  }
else return(-1);


}


#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int get_complex(char *name,int nloc,double *value)
_XFUNCPROTOEND
#else
int get_complex(name,nloc,value)
char *name;
double *value;
int nloc;
#endif
{
int off,i,ioff;


if((int)strlen(name) ==8  || (int)strlen(name) ==9){
  if((int)strlen(name) ==8  ) ioff=5;
  else ioff=6;
   if(name[ioff]='.' && ((name[ioff+1]=='r' && name[ioff+2]=='e') || 
    (name[ioff+1]=='i' && name[ioff+2]=='m'))){
     if(name[ioff+1]=='i') off=1;
    else off=0;
  }
  else seperr("Invalid expresion5, unrecognized name=%s \n",name);
}
else off=ioff;

for(i=0;i<n1*nblock;i++) value[i]=(double)buf_in[2*i+off+begin[nloc]];
return(0);
}



#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int get_real(char *name,int nloc,double *value)
_XFUNCPROTOEND
#else
int get_real(name,nloc,value)
char *name;
double *value;
int nloc;
#endif
{
int i;


if(first!=0 || 0!=strcmp(files[nloc],"in")){

/*if(done!=sseek_block(files[nloc],done,n1*4,0))*/
/*  seperr("trouble seeking to %d trace in %s \n",done,files[nloc]);*/
}
else first=1;

for(i=0;i<n1*nblock;i++) value[i]=(float)buf_in[i+begin[nloc]];
return(0);
}

void make_term(char *myexp,int *first, char *type, int *index, int sign){
int i,j;
float scale2;
char temp_ch[4096];

if(*first!=0) strcat(myexp,"+");
else *first=1;
if(sign%4==0 || sign%4==1) scale2=1.;
else scale2=-1.;

if(index[0]==0) sprintf(temp_ch,"(%f*file1.re",scale2);
else sprintf(temp_ch,"(%f*file1.im",scale2);



for(i=1; i < nfiles; i++){
  if(index[i]==0) sprintf(temp_ch,"%s*file%d.re",temp_ch,i+1);
  else sprintf(temp_ch,"%s*file%d.im",temp_ch,i+1);
  if(type[0]=='/'){
     sprintf(temp_ch,"%s/(0.000000001+file%d.re*file%d.re+file%d.im+file%d,im)",
       temp_ch,i,i,i,i);
  } 
}
sprintf(myexp,"%s%s)",myexp,temp_ch);
  

}
void complex_string(char *exp_out,char *exp_in,char *add){
int i,j;

i=0;j=0;
while(exp_in[i] != '\0'){

  exp_out[j]=exp_in[i];
  if(i > 3){
    if(exp_in[i-1]=='e' &&exp_in[i-2]=='l' &&exp_in[i-3]=='i' &&exp_in[i-4]=='f'){
       j++;exp_out[j]='.';
       j++;exp_out[j]=add[0];
       j++;exp_out[j]=add[1];
    }
  }
  i++; j++;
}


}
void seek_it(void *ss)
{
 seek_info *seekit;

 seekit=(seek_info *) ss;
 sseek(seekit->tag,seekit->amount,1);

}
