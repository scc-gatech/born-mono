
 /*$

=head1 NAME

 Sdd - Convert between formats

=head1 SYNOPSIS

Sdd esize= ein= real=yes line=8 format=  allpos=n/y < in.H > out.H

=head1 INPUT PARAMETERS

=over 4

=item  esize      - int     

      element size on output file.

=item  ein       - int     

      element size on input file.
      ( if esize is not found in input heade file ).

=item  real      - int     

      [yes]  for conversions to or from esize=8. 
      the imaginary part of the complex numbers is assumed zero
      no- the real part is assumed zero.

=item  line      - int     

      [8] for conversion to ascii default is to 
      print 8 numbers per line.

=item  format    - char*   

      format to use in printf for ascii output.
      [-8.3g]  for float.
      [-6d]   for bytes and shorts.

=item  allpos    - char    

      [n]  y  maps only positive numbers in 0-255

=item  n1,n2,n3  - int     

      cube dimensions. (from history)

=item  esize     - int    

      (from history) 0 -ascii float,integer or complex 
      (complex format i=(0.,1.))
      1 -movie format (only input)
      2 -short integer
      3 -floating point with least significant byte truncated.
      4 -floating point
      8 -complex

=back


=head1  DESCRIPTION

 Convert from input esize=0,1,2,3,4,8 to output esize=0,1,2,3,4,8
 

=head1 CATEGORY

B<util/info>

=cut
>*/
/*
KEYWORDS esize format imag convert ascii dump


SEE ALSO
  Taplot Disfil

WHERE
  ./our/cube/util/Dd.c
copyright (c) 1991 Stanford University
*/

/*
 *    ______________________________
 *     Keyword:  esize format imag convert ascii dump :
 *    _______________________________
 *     Author: Clement Kostov    December 1985
 *
 * Edit History:
 *
 *  Joe Dellinger - Aug 1 1988 - Added "format" option; ran the program
 *      through indent; made some defaults more self-consistent.
 *      PS: LOTS of unused variables in this code. Tsk, tsk.
 *     Clement Kostov - Nov 17,1988 - Added allpos option
 *  Jon Claerbout -  Jan 8, 1992 junk nt,nx anachronisms
 *  Dave Nichols  -  Dec 22, 1995, make it work for pipes by cacheing input
 *  Bob Clapp     - Oct 1997 - Merged into one converted all to C
 *  Bob Clapp     - Aug 1998 - Limited memory usage, fixed SGI bug, extended;
 *                             beyond 3-D, removed Grey/Byte overlap, fixed
 *                             line printout
 */

#define  YES    1
#define  NO     0
#define MAX_LINE_LENGTH 409600

#include<sepConfig.h>

static      int      allpos,ncp,fl;
static float  dbuff[MAX_LINE_LENGTH/2 +1];
static int   beg,nelem; 
static char buf_new[MAX_LINE_LENGTH],buf_old[MAX_LINE_LENGTH*2];

#include<sepmath.h>

int ddreed (char *intag,float *ptr,int length,int esize);
int dd_fill(char *ptr,char *bufcar,int length);
int ddrite(char *outtag,float *ptr,int length,int esize);
int dd_strip(char *ptr, char *ptrcp, int nbuf);
int dd_scale( float *ptr, int n );
int  cmplx2r(float *in,float *out,int n,char flag);
int r2cmplx(float *in,float *out,int n,char flag);
int etoa(float *data, int block, int esize, int line, char *in_form, int last);
int new_atoe (float *data, int *n, int block, int esize, int *end);
int num (char s);
int checkrange (int N, float *data);
int convto1 (int N, float *data, char *outtag);

ADD_DEF_SEP_DOC

#include <stdlib.h>
#include <sep.main>

int MAIN (void)
{
int             n1, n2, n3, N, line, ein, eout, i, emax,block,ndim,i1,nt;
char           *data;
char            in_form[80];
int            read,done,nconverted,ntot,lof,end=0;
char           label[256],temp_ch[256];
float           o,d;
int            loc,last,axis=1,ierr;

/* Get parameters */

  if (hetch ("esize", "d", &ein) == 0)
    if (fetch ("ein", "d", &ein) == 0) seperr (" input esize not given \n");
  putch ("input esize", "d", &ein);

 if (getch ("esize", "d", &eout) == 0) seperr (" output esize not given \n");
 putch ("output esize", "d", &eout);

  allpos=NO ;   getch("allpos","1",&allpos);





  if (fetch ("line", "d", &line) == 0) line = 0;
   putch ("line", "d", &line);
  strcpy (in_form, "");
  if (fetch ("format", "s", in_form)) putch ("format", "s", in_form);

  /* Check ranges for input and output esize */
  if (ein == eout) seperr ("input esize is equal to output esize!!");
  switch (ein) {
    case 0:
     case 1:
    case 2:
    case 3:
    case 4:
    case 8:
    break;
    default:
  seperr (" improper range for input esize \n  ");
  break;
    }
    switch (eout)
    {
    case 0:
      break;
    case 1:
  seperr (" invalid eout parameter (use Grey) \n  ");
    case 2:
    case 3:
    case 4:
    case 8:
  break;
    default:
  seperr (" improper range for output esize   \n");
  break;
    }


  /*OBTAIN DATA DIMENSIONS */
  if (fetch ("n1", "d", &n1) == 0) {
    if (ein == 0) n1 = 0;
    else seperr (" n1 not given \n");
   }
  if (n1 != 0) {
    ierr=1;axis=1;
    N=1;
    sprintf(temp_ch,"n%d",axis);
    while(fetch(temp_ch,"d",&nt)){
      axis+=1;
      N=N*nt;
      putch(temp_ch,"d",&nt);
      sprintf(temp_ch,"n%d",axis);
    }
  }
  else{
    make_unpipe("in");
    N=ssize ("in");
  }

  

/* NOT CORRECTLY DEALING WITH UNSPECIFIED N */
  /* Allocate space */
    emax = 4;
    if ((ein > 4) || (eout > 4)) emax = 8;

    block=MIN(N*emax,10000000);
    data = (char *) alloc (emax*block*sizeof(char));

  done=0;

  ncp=-1; loc=0;
  if(ein==0){ make_unpipe("in");
    lof = ssize ("in");
    if (lof == 0) seperr ("atoe: input file of length zero");
    ntot=0;fl=1;
  }
  if(n1!=0) hclose ();
  beg=1; nelem=0;


  while(done < N  && end==0){
    /*LOOP  OVER DATA CONVERTING*/

  
    block=MIN((N-done)*emax/4,10000000);
    
    if(block+done==N) last=1;
    else  last=0;

    if(ein==0){
      nconverted=0;
       new_atoe ((float *) data, &nconverted,block, emax,&end);
      if(end==1) 
        seperr("trouble reading ascii file after %d elements \n",
          ntot+nconverted *emax/4);
      if (eout == 8) ddrite ("out",(float*)data, nconverted , eout / 2);
      else ddrite ("out",(float*) data, nconverted , eout);
      ntot+=nconverted * emax/4;

     }
    

    if (eout == 0) {
      if (ein == 8) sreed ("in", data, block * emax);
      else ddreed ("in", (float*) data, block * ein, ein);
  
      etoa ((float *)data, block, ein, line, in_form,last);
     }

    /*
     * General case: read and convert from ein to esize=4
     * convert from esize=4 to eout and write
     */

    if (ein > 0) {
			if(ein==8 || eout==8) /*this is wrong , but  is acceptable until a
                              good test case is developed- Bob */
      ddreed ("in",(float*) data,(int)( (float)block/(double)emax *(double) ein), ein);
			else
      	ddreed ("in",(float*) data,block*ein, ein);
      if (eout > 1) {
        ddrite ("out",(float*) data, (int)((double)block/(double)emax * 4.), eout);
      }
     }
  
    done+=block;
  }
  if (n1 == 0) putch ("n1", "d", &N);

  return(EXIT_SUCCESS);
}      /* end of MAIN */

int etoa (float *data, int block, int esize, int line, char *in_form, int last)
/*
 * data , pointer to data, converted to real numbers
 * n1,n2,n3, size of dataset
 * esize, format for output
 * "out", output file tag
 */
{
int             n, m, i1, i2, i3, i, j,old;
int             len = 0,cur,read,done;
char            string[30];
char            form[80];
char            buf[200],buf2[200],buf3[200],buf4[200];



  done=0; 
  if(ncp==-1) old=0;
  else old=ncp;
  
  if (esize == 2 || esize == 1){ 
    if (line == 0) line = 8;
    if (in_form[0] == '\0') strcpy (form, "%-6d  ");
    else sprintf (form, "%%%s  ", in_form);
  }
    else if (esize == 4) {
      if (line == 0) line = 8;
      if (in_form[0] == '\0') strcpy (form, " %-8.3g ");
      else sprintf (form, " %%%s  ", in_form);
    }


   else if (esize == 8) {
    line = 4;
    if (in_form[0] == '\0') strcpy (form, " %-8.3g ");
    else sprintf (form, " %%%s  ", in_form);
  }


    
    while(done< block){
    buf2[0]='\0';
      if(block-done-old < line && last!=1){
        if(esize==2 || esize == 1)
          for(i1=done; i1< block; i1++){
            sprintf(buf,form,(int)data[i1]);
            strcat(buf2,buf);
          }
        else if(esize==4)
          for(i1=done; i1< block; i1++) {
            sprintf(buf,form,data[i1]);
            strcat(buf2,buf);
          }
        else if(esize==8)
          for(i1=done; i1< block; i1+=2){
             sprintf(buf3,form,data[i1]);
             sprintf(buf4,form,data[i1+1]);
             sprintf(buf,"(%s,%s)",buf3,buf4);
            strcat(buf2,buf);
          }
        if(old>0){
           sprintf(buf_new,"%s%s",buf_old,buf2);
           strcpy(buf_old,buf_new);
        }
        else strcpy(buf_old,buf2);
        old=old+block-done;
        done=block;
      }
      else{
       if( done+line+old <= block){
          if(esize==2 || esize == 1)
            for(i1=0; i1< block; i1++) {
              sprintf(buf,form,(int)data[i1+done]);
              strcat(buf2,buf);
            }
          else if(esize==4)
            for(i1=0; i1< line; i1++) {
              sprintf(buf,form,data[i1+done]);
              strcat(buf2,buf);
            }
          else if(esize==8)
            for(i1=0; i1< line; i1+=2){
               sprintf(buf3,form,data[i1+done]);
               sprintf(buf4,form,data[i1+1+done]);
               sprintf(buf,"(%s,%s)",buf3,buf4);
              strcat(buf2,buf);
            }
          if(old>0) sprintf(buf_new,"%s%s\n",buf_old,buf2);
          else sprintf(buf_new,"%s\n",buf2);
          done+=line-old;
          old=0;
        }
        else{
          if(esize==2 || esize == 1)
            for(i1=done; i1< block; i1++) {
              sprintf(buf,form,(int)data[i1]);
              strcat(buf2,buf);
            }
          else if(esize==4)
            for(i1=done; i1< block; i1++) {
              sprintf(buf,form,data[i1]);
              strcat(buf2,buf);
            }
          else if(esize==8)
            for(i1=done; i1< block; i1+=2){
               sprintf(buf3,form,data[i1]);
               sprintf(buf4,form,data[i1+1]);
               sprintf(buf,"(%s,%s)",buf3,buf4);
              strcat(buf2,buf);
            }
          if(old>0) sprintf(buf_new,"%s%s\n",buf_old,buf2);
          else sprintf(buf_new,"%s\n",buf2);
          done=block;
          old=0;
        }
        srite_raw ("out",buf_new, strlen(buf_new));
      }
    }
    ncp=old;
        
  return(0);
}

int new_atoe (float *data, int *n, int block, int esize, int *end)
{
int i,b,nlen,nc,bstring,estring,nscan,convert;
char cbuff[MAX_LINE_LENGTH];


nc=0; 
/*convert=block*esize/4;*/
convert=block;


/*first translate the old buffer */
i=beg;
while(i < nelem && nc < convert){
  data[nc]=dbuff[i];
  nc++; i++;
}



/* loop until we find the end of the block or end of file */
while(nc<convert){
  /*we are at the end of the file */
  if(feof(instream)){ *end=1; return(1);}

  /* read in a line */
  if(NULL == fgets(cbuff,MAX_LINE_LENGTH-2,instream)) {
     perror("Sdd: instream read problem ");
     *end=1; return(1);
  }
/*fprintf(stderr,"checkt his %s convert-%d nc-%d",cbuff,convert,nc);*/


  /* loop through the line converting to numbers */
  nlen=strlen(cbuff); nelem=0; i=0;

  if(nlen==MAX_LINE_LENGTH-2)
    seperr("maximum line length exceeded \n");

  while(i < nlen){

    /*search for the begining of a number */
    while(0==num(cbuff[i]) && i < nlen){ i++;}
    
    if(i!= nlen){ /* found  a number */
      b=i;

      /*search for the end of the number */
      while(1==num(cbuff[i]) && i < nlen){ i++;}

      nscan = sscanf (&cbuff[b], "%f", &dbuff[nelem]);

      nelem++;
    }
  }

  /*now we need to move these to the data elements */
  beg=0;
  while(nc  < convert && beg < nelem){
      data[nc]=dbuff[beg];
       beg++;  nc++;
  }
}

*n=nc;
end=0;
return(0);
}


int atoe (float *data, int *n, int block,int esize,int *end)
{
int             lof, i, nscan, N1,ss;
int             read,left,i1,tt,last;
char            temp_buf[4096];

    read=0; 
    buf_new[MAX_LINE_LENGTH-1]='\0';
    buf_old[2*MAX_LINE_LENGTH-1]='\0';
    while(read < block && *end<2){
      if(ncp==-1) tt =0;
      else tt=ncp;
      last=0;
      /*first copy old buffer to new buffer */
      if(ncp>0) for(i1=0;i1<ncp;i1++) buf_new[i1]=buf_old[i1];
      buf_new[ncp]='\0';

      ss=sreed_raw ("in", &buf_new[tt], 4096 * sizeof (char));
      if(4096!=ss) *end++;
      if (ss==1){
         data[0] =(float)buf_new[0];
         read+=1;
      }
       else{
        for (i = 0; i < 4096+tt - 1 && read <= block && buf_new[i]!='\0'; i++) {
          if (buf_new[i] == '[') fl = 0;
          if (buf_new[i] == ']') fl = 1;
          /* check for beginning of number  */
          if (fl == 1) {
            /* special case at beginning of file  */
            if (i == 0 && num (buf_new[i])) {
              nscan = sscanf (&buf_new[i], "%f", &data[read]);
              read+=1;
            }
            else if (!num (buf_new[i]) && num (buf_new[i + 1]) && read <= block) {
              last=i+1;
              nscan = sscanf (&buf_new[i + 1], "%f", &data[read]);
              read+=1;
            }   
          }
        }
      ncp=strlen(buf_new)-last-1; 
      if(last!=0) {
        read-=1;
        strcpy(buf_old,&buf_new[last]);
      }
      }
    }
  *n=read;
  return(0);
}
int num (char s)
{
int             res;
    res = 0;
    if ((s >= '0' && s <= '9') || s == '.' || s == '+' || s == '-'
  || s == 'e' || s == 'E')
  res = 1;
    return (res);
}



int convto1 (int N, float *data, char *outtag)
/*
 * converts floats in the range -128,127 to movie bytes
 */
{
unsigned char  *ptr;
int             i;
short int       zero = 128;

    ptr = (unsigned char *) alloc (N);

    for (i = 0; i < N; ++i)
  ptr[i] = (unsigned char) (short int) data[i] + zero;

    srite_raw (outtag, ptr, N);
  return(0);
}

int checkrange (int N, float *data)
/* check whether data are in [-128.,127] */
{
int             i;

    for (i = 0; i < N; ++i)
  if ((data[i] < -128.) || (data[i] > 127.))
      seperr ("data outside range [-128.,127.], sorry");
  return(0);

}


#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int ddreed (char *intag,float *ptr,int length,int esize)
_XFUNCPROTOEND
#else
int ddreed (intag,ptr,length,esize)
int  length, esize;
float *ptr;
char *intag;
#endif
/*
 *  Buffered read with conversion from esize=1,2,3,4,8 to esize=4.
 *      When the input is esize=8, by default the output contains
 *  the real parts. If instead the imaginary parts are wanted,
 *  enter the flag "real=no" on the command line.
 *  Returns the number of bytes after conversion, that is
 *     (number of bytes read)*4/esize
 */
{
  char *bufcar;
  unsigned char *bufucar;
  char flag[5];
  short int *bufint,t;
  int nread, total,i;
  static int BUFSIZHERE = 65536;
  short int zero = 128 ;
  float *real;

  total = sreed_raw(intag,ptr,length);

        total= total/esize;
  if( esize == 3 ) {
      bufcar = (char *) alloc(length);
      dd_fill((char *)ptr,bufcar,length) ; }
  else {
  real= (float *) alloc(total*sizeof(float));
  if( esize == 1 ){
      bufucar = (unsigned char * ) alloc(total*sizeof(char));
      bufucar = ( unsigned char *) ptr ;
      for ( i=0 ; i < total ; i++ ){
        real[i]= (float) (short int) ( bufucar[i] - zero );
      }
      for ( i=0 ; i < total ; i++ ) ptr[i]=real[i];
  }



  if( esize == 2 ) {
      bufint = (short int *) alloc( total*sizeof(short int) );
      bufint = (short int *) ptr;
      for ( i=0 ; i < total ; i++ ) real[i]= (float) bufint[i];
      for ( i=0 ; i < total ; i++ ) ptr[i]= real[i];
          }
  if( esize == 8 ) {
      if( fetch("real","s",flag )==0 || flag[0]!='n' ) flag[0]='y' ;
      cmplx2r((float*) ptr , real , total , flag[0] );
      for ( i=0 ; i < total ; i++ ) ptr[i]=real[i];
          }

    }
return(total*4);
}
#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int dd_fill(char *ptr,char *bufcar,int length)
_XFUNCPROTOEND
#else
int dd_fill(ptr,bufcar,length)
int length;
char *ptr, *bufcar;
#endif
/*
 *        convert from esize=3 to esize=4 by inserting zeros for
 *        the least significative byte of a floating
 *        point number (fourth  byte in a word on Convex).
 */
{
  int nptr, nbufcar;

  for ( nptr=0 ; nptr< length ; ++nptr )
       bufcar[ nptr ] = ptr[ nptr ] ;  /* make a copy of input data */

 nptr=0;

  for ( nbufcar=0 ; nbufcar < length ; nbufcar += 3 )
    {   ptr[ nptr ] = bufcar[ nbufcar ] ;
        ptr[ nptr + 1 ] = bufcar[ nbufcar + 1 ];
        ptr[ nptr + 2 ] = bufcar[ nbufcar + 2 ];
        ptr[ nptr + 3 ] = '\0';
        nptr += 4 ;
    }
  return(0);
}




/*  Buffered write with conversion from esize=4 to esize=1,2,3,4,8.
 *
 *      When esize=8, by default the ouput contains
 *  the real parts. If instead the imaginary parts are wanted,
 *  enter the flag "real=no" on the command line.
 *  Returns the number of bytes written.
 */

#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int ddrite(char *outtag,float *ptr,int length,int esize)
_XFUNCPROTOEND
#else
int ddrite(outtag,ptr,length,esize)
int length, esize;
float *ptr;
char *outtag;
#endif
{
  extern int isapipe();
  char *bufcar;
  short int *bufint;
  int nwrite, inbyt, total= 0 , i , nbuf ,lo4 ;
  int BUFSIZHERE = 65536;
  char flag[5];
  float *bufz; 


if( esize == 4 ) {
  nwrite= srite(outtag,ptr,length*esize);
  if (nwrite<0)
     { perror("srite()");
       seperr("ddrite() error tag %d\n",outtag); }
  total += nwrite;
}

if( esize == 2 ) {
lo4 = length/4 ;
dd_scale( (float *) ptr, lo4 ); 
for( inbyt=0 ; ( 0 < (nbuf=MIN(length - inbyt, BUFSIZHERE)/4 )); inbyt += nbuf*4  ) 
    {
        bufint = (short int *) alloc( nbuf*sizeof(short int)); 
        bufz= (float *) ptr;
        for( i=0  ; i< nbuf  ; i++ )
          bufint[i] = (short int) bufz[i];
        nwrite= srite_raw(outtag,bufint,nbuf*sizeof(short int));
         if (nwrite<0)
         { perror("rite()");
          seperr("ddrite() error outtag %d\n",outtag); }
        total += nwrite;
              }
    }

if( esize == 3 ) { 
for( inbyt=0 ; ( 0 < (nbuf=MIN(length - inbyt, BUFSIZHERE)/4 )); inbyt += nbuf*4  ) 
    {
         bufcar = (char *) alloc(nbuf*3) ;
         dd_strip((char*)(ptr+inbyt),bufcar,nbuf*4); 
        nwrite= srite_raw(outtag,bufcar,nbuf*3);
         if (nwrite<0)
         { perror("srite_raw()");
          seperr("ddrite() error outtag %d\n",outtag); }
         total += nwrite;
               }
      }

if( esize == 8 ) {
        bufz = (float *) alloc(BUFSIZHERE*2*sizeof(float));
        if( fetch("real","s",flag)==0 || flag[0]!='n' )
          flag[0]='y';
for( inbyt=0 ; ( 0 < (nbuf=MIN(length - inbyt, BUFSIZHERE)/4 )); inbyt += nbuf*4  ) 
    {
        r2cmplx((float*) (ptr + inbyt) , bufz , nbuf , flag[0] );

        nwrite= srite_raw(outtag,bufz, nbuf*2*sizeof(float));
         if (nwrite<0)
         { perror("srite_raw()");
          seperr("ddrite() error outtag %d\n",outtag); }
         total += nwrite;
          }
        }
  return(total);
}

#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int dd_strip(char *ptr, char *ptrcp, int nbuf)
_XFUNCPROTOEND
#else
int dd_strip(ptr, ptrcp, nbuf)
int nbuf;
char *ptr , *ptrcp;
#endif
/*
 *  remove least significative byte of a real number
 *   fourth byte for Convex storage 
 *
 */
    {  
  int nptrcp= 0 ;
  int nwrite, nptr, ip, count= nbuf*3/4 ;

    for( nptr=0; nptr < nbuf ; nptr += 4  )
     {   ptrcp [ nptrcp ]     =  ptr [ nptr ] ;
              ptrcp [ nptrcp + 1 ] =  ptr [ nptr + 1];
              ptrcp [ nptrcp + 2 ] =  ptr [ nptr + 2];
        nptrcp += 3 ;
      }
  return(0);
}

#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int dd_scale( float *ptr, int n )
_XFUNCPROTOEND
#else
int dd_scale( ptr, n )
float *ptr; 
int n;
#endif
{
  int mini, maxi, i ;
  float  high , low , fact ;
/*
 checks if necessary to rescale the numbers in buf
 in the range [minint,maxint] so that a proper
 conversion from real to short int can be done
 */

maxi = 32000 ; mini = -32000 ;
high = (float) maxi   ; low = (float) mini  ;
for( i=0 ; i < n ; i++ )
{
if( ptr[i] > high ) high = ptr[i] ;
if( ptr[i] < low  ) low = ptr[i] ;
}
if( maxi < high  || mini > low )
          {
if ( high != low )
  {
  fact= ( maxi - mini )/( high - low );
  for( i=0 ; i < n ; i++ )
  ptr[i]= mini + (ptr[i]- low)*fact ;
  }
else if ( high > maxi ) 
  for( i=0 ; i < n ; i++ )
  ptr[i]=maxi;
else if ( high < mini ) 
  for( i=0 ; i < n ; i++ )
  ptr[i]=mini;
          }
  return(0);
}

#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int  cmplx2r(float *in,float *out,int n,char flag)
_XFUNCPROTOEND
#else
int  cmplx2r(in,out,n,flag)
float *in, *out;
int n;
char flag;
#endif
{
int i;
if( flag != 'y')
  for(i=0; i < n; i++)
    out[i]=in[2 * i];
else
  for(i=0; i < n; i++)
    out[i]=in[2 * i+ 1];
return 0;
}


#if NeedFunctionPrototypes
_XFUNCPROTOBEGIN
int r2cmplx(float *in,float *out,int n,char flag)
_XFUNCPROTOEND
#else
int r2cmplx(in,out,n,flag)
float *in,*out;
int n;
char flag;
#endif
{
int i;
/*
 convert to complex number by setting real or
 imaginary part to zero according to flag
*/

if( flag!='y' ) {     /* set imaginary part to zero */
    for(i=0; i < n ; i++) out[2*i]=0.;
    for(i=0; i < n ; i++) out[2*i+1]=in[i];
}else{
    for(i=0; i < n ; i++) out[2*i+1]=0.;
    for(i=0; i < n ; i++) out[2*i]=in[i];
}
return 0;
}
