/*$

=head1 NAME

 Overlay - draws simple overlays

=head1 SYNOPSIS

 Overlay < in.H > out.V [pars]

=head1 DESCRIPTION

	Draws polylines, text, boxes, and oval overlays

=head1 COMMENTS

 Options let you position objects, control the
 size of the labeling, etc. 
 The objects can be overlayed onto vplot
 graphics files using the 'erase=once' option of pen filters.
 For example, 'Tube < Wiggleout.H Boxout.H erase=once' The
 interact option of pen filters can be used to determine the
 coordinate of the spot the box's pointer is to point at.
 (Alas, not all pen filters support the 'interact' capability.)
 The special pen filter Vppen can be used to combine vplot
 files.

=head1 INPUT PARAMETERS 

=over 4

=item 	 type -  char* 

        Must be 'box','oval','arrow','polyline', or 'text'

=item   fat  -  int

        [0] Fatness of object

=item 	color-  int    

        [7]     Color of object

=back 

=head1 Box Parameters

=over 4

=item 	x   -   float 

        [0]  Relative Position of left edge of box

=item 	y   -   float

        [0]  Relative Position of  bottom edge of box


=item   width -   float

        [1.]  Width of box

=item   height  -  float

        [1.]  Height of box

=back

=head1  Oval Parameters

=over 4


=item x,y   - float

       [0,0]   Center of oval x

=item x_oval,y_oval -  float

       [1.,1.]  Major axes for oval 

=back 


=head1 Arrow and Polyline parameters

=over 4

=item x,y -  float*

       [0,0][1.,1.]   Array of points to draw lines between (max 50)


=item 	pscale -    float  (arrow only)

        [1.]    scale factor for width of pointer

=back 

=head1 Text parameters

=over 4

=item x,y - float

      [0.,0.]   Location of text


=item 	size -      float 

        [.25]    Height of text, in inches

=item 	label-      char* 

        ' '   Text string for label

=item 	angle-      int    

        [0]     Angle for text


=item 	boxit-     int       

       [1] Whether (1) or not (0) to create a box arround text


 


=back

 

=head1 COMPILE LEVEL

 LOCAL

=head1 CATEGORY

B<sep_graphics>

=cut

*/

/*

AUTHOR 
	  Bob Clapp, October 2000

    Much code from Box: Joe Dellinger, August 1989

KEYWORDS vplot balloon label pointer 3d

WHERE
	./cube/plot/Box.c

*/
#define IN	"/dev/null"
#define NOHEADER	Y
ADD_DEF_SEP_DOC

#include <stdlib.h>
#include <sep.main>
#include <vplot.h>
#define OVAL_PTS 400

#define BOX 0
#define OVAL 1
#define ARROW 2
#define POLYLINE 3
#define TEXT 4


int MAIN (void)
{
float           xarray[3], yarray[3];
char            type[500];
char            label[500];
float           x0, y0;
float           xt, yt;
float           tx_height;
float           sign_longi;
double          xin, yin, zin, xout, yout, zout;
float           xpath, ypath, xup, yup;
int             rev;
float           scale0, scalet;
float           length, norm;
int             color, fat;
float           xdis, ydis;
float           pscale;
double           deg_rad,angle2;
float           x_oval,y_oval;
float           x[100],y[100],x1,y1;
float           width,height,size;
int             ii,boxit,pointer,npts,my_type,angle;

		 vp_filep(outstream); /* tell plotting routines where to stick it */

   deg_rad=atan(1.)/45.;

  /*first grab the general parameters */
    color = WHITE;
    fat = 0;
    getch ("color", "d", &color);
    putch ("color", "d", &color);
    getch ("fat", "d", &fat);
    putch ("fat", "d", &fat);

    getch ("type", "s", type);
    putch ("type", "s", type);


	 if(0==strcmp(type,"box"))  my_type=BOX;
	 else if(0==strcmp(type,"oval"))  my_type=OVAL;
	 else if(0==strcmp(type,"arrow"))  my_type=ARROW;
	 else if(0==strcmp(type,"polyline"))  my_type=POLYLINE;
	 else if(0==strcmp(type,"text"))  my_type=TEXT;
   else seperr("invalid type:%s \n",type);

   switch (my_type){
     case BOX:
      height=1.;getch("height","f",&height);
      width=1.;getch("width","f",&width);
      putch("height","f",&height);
      putch("width","f",&width);
			x0=0.;getch("x","f",&x0);
			y0=0.;getch("y","f",&y0);
			putch("x","f",&x0);
      break;
     case OVAL:
      x_oval=1.;getch("x_oval","f",&x_oval);
      y_oval=1.;getch("y_oval","f",&y_oval);
      putch("x_oval","f",&x_oval);
      putch("y_oval","f",&y_oval);
			x0=0.;getch("x","f",&x0);
			y0=0.;getch("y","f",&y0);
			putch("x","f",&x0);
      break;
     case TEXT:
      strcpy(label," ");getch("label","s",label);
      angle=0;getch("angle","d",&angle);
      size=.25;getch("size","f",&size);
      putch("label","s",label);
      putch("angle","d",&angle);
      putch("size","f",&size);
			x0=0.;getch("x","f",&x0);
			y0=0.;getch("y","f",&y0);
			putch("x","f",&x0);
			putch("y","f",&y0);
      boxit=1; getch("boxit","d",&boxit);
      putch("boxit","d",&boxit);
	    break;
    case ARROW:
      pscale=1.;getch("pscale","f",&pscale);
      putch("pscale","f",&pscale);
    case POLYLINE:
      npts=getch("x","f",x);
      ii=getch("y","f",y);
      if(npts!=ii) seperr("number of x(%d) not equal number of y(%d)\n",npts,ii);
      if(npts<2) seperr("must provide at least two points \n");
      break;
		}
    hclose ();

    



    vp_color (color);
    vp_penup ();
    vp_fat (fat);
  

    /*now lets begin drawing */
   switch (my_type){
     case BOX:
		  vp_move(x0,y0);
		  vp_pendn(x0,y0);
			vp_pendn(x0+width,y0);
			vp_pendn(x0+width,y0+height);
			vp_pendn(x0,y0+height);
			vp_pendn(x0,y0);
	    break;
     case OVAL:
		  vp_move(x0-x_oval,y0);
		  x1=-x_oval;
		  for(ii=0; ii < OVAL_PTS; ii++){	
			  y1=(1.-x1*x1/x_oval/x_oval);
			  if(y1<0) y1=0;
			  y1=y_oval*sqrt(y1);
			  vp_pendn(x0+x1,y1+y0);
			  x1+=2*x_oval/OVAL_PTS;
		  }
		  for(ii=0; ii < OVAL_PTS+1;ii++){
			  y1=(1.-x1*x1/x_oval/x_oval);
			  if(y1<0) y1=0;
			  y1=y_oval*sqrt(y1);
		  	vp_pendn(x0+x1,y0-y1);
			  x1-=2*x_oval/OVAL_PTS;
		  }
      break;
    case TEXT:
		  vp_move(x0,y0);
      vp_tjust (TH_CENTER, TV_HALF);
	    if(boxit==0) vp_tfont (NO_CHANGE, NO_CHANGE, OVLY_NORMAL);
	    else vp_tfont (NO_CHANGE, NO_CHANGE, OVLY_SHADE_BOX);
      if(angle>360){ while(angle>360) angle-=360;}
      if(angle <0) { while(angle<0) angle+=360;}
      
      if(angle<90){
        xpath=size*cos((double)angle*deg_rad); 
        ypath=size*sin((double)angle*deg_rad);
      }
      else if(angle < 180){
       angle2=180.-angle;
       xpath=-size*cos(angle2*deg_rad); 
       ypath=size*sin(angle2*deg_rad);
     }
     else if(angle < 270){
      angle2=angle-180.; 
      xpath=-size*cos(angle2*deg_rad); 
      ypath=-size*sin(angle2*deg_rad);
     }
     else{
      angle2=360.-angle;
      xpath=size*cos(angle2*deg_rad); 
      ypath=-size*sin(angle2*deg_rad);
     }
     xup=-ypath; yup=xpath;
     vp_gtext (x0, y0, xpath, ypath, xup, yup, label);
     break;
   default: /* polyline or arrow */
	  vp_move(x[0],y[0]);
	 vp_pendn(x[0],y[0]);
   /* do all but the lines the same */
    for(ii=1; ii < npts;ii++){
			 vp_pendn(x[ii],y[ii]);
		}

   if(my_type==ARROW){ /* ADD THE ARROW IF ASKED */
    xdis = (y[npts-2] - y[npts-1]);
    ydis = -(x[npts-2] - x[npts-1]);
    norm = 3. * sqrt (xdis * xdis + ydis * ydis);
    if(norm==0.){ xdis=0;ydis=0;}
    else{
	    xdis *= pscale * .25 / norm;
	    ydis *= pscale * .25 / norm;
    }
    xarray[0] = x[npts-2] + xdis;
    yarray[0] = y[npts-2] + ydis;
    xarray[1] = x[npts-1];
    yarray[1] = y[npts-1];
    xarray[2] = x[npts-2] - xdis;
    yarray[2] = y[npts-2] - ydis;
    vp_color (BLACK);
    vp_fat (0);
    vp_fill (xarray, yarray, 3);
    vp_color (color);
    vp_fat (fat);
    vp_penup ();
    for (ii = 0; ii < 3; ii++) vp_pendn (xarray[ii], yarray[ii]);
	}
  break;
 }
     
    vp_endplot ();
	return(EXIT_SUCCESS);
}
