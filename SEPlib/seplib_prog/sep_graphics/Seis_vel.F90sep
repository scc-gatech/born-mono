!!$
!!$=head1 NAME
!!$
!!$ Seis_vel  - Display Seismic and velocity simutaneously
!!$
!!$=head1 USAGE
!!$
!!$ Seis_vel vel=vel.H data=data.H fn_color=color.file  >out.H bg_min= bg_max
!!$
!!$=head1 PARAMETERS
!!$
!!$=over 4
!!$
!!$=item vel - sepfile (required)
!!$
!!$ Velocity file
!!$
!!$=item  data - sepfile (required)
!!$
!!$ Data file
!!$
!!$=item  bg_min,bg_max - real (required)
!!$
!!$ clip background values (determine from velocity file min/max)
!!$
!!$=item  data2 - sepfile
!!$
!!$ Second data file (optional)
!!$
!!$=item  stdout - sepfile
!!$
!!$  Datafile to use with Grey
!!$
!!$=item  color - sepcolor
!!$
!!$  Color file to use with Grey
!!$
!!$=item  fg_linear_or_log - integer
!!$
!!$  [1]   forground color display mode
!!$
!!$=item  fg_clip_linear- real
!!$
!!$  [.5] (0.-1., percentage of max value of each snapshot 
!!$
!!$         above which data will be clipped dfor linear mode
!!$
!!$=item  fg_modulate_log- integer
!!$
!!$  [10000]  modulate data for log mode, a large integer > 100
!!$
!!$=item  fg_nhue - integer
!!$
!!$ [18]  number of hues
!!$
!!$=item  fg_nlightness - integer
!!$
!!$ [12]  number of lightness regions
!!$
!!$=item  fg_min_lightness,fg_max_lightness - real
!!$
!!$ [.3,.8]  range of lightness 
!!$
!!$=item  fg_saturation - real
!!$
!!$ [1.]  foreground saturation
!!$
!!$=item  bg_nhue - integer
!!$
!!$ [20]  number of background hues
!!$
!!$=item  bg_lightness - real
!!$
!!$ [.3]  bacground lightness
!!$
!!$=item  bg_saturation - real
!!$
!!$ [.3]  bacground saturation
!!$
!!$=back
!!$
!!$=head1 DESCRIPTION
!!$
!!$     Composing two components (x and y, e.g., p wave and s wave) as 
!!$
!!$      the foreground with a velocity model as the background
!!$
!!$
!!$=head1 COMMENTS
!!$
!!$ COLOR SCHEME:
!!$      Forground   H: atan2(y,x) (i.e. 360 degree)
!!$                  L: sqrt(x^2+y^2)*clip (range e.g. 0.8-0.3)
!!$                  S: constant (e.g. 1.0)
!!$                  Number of fg colors = fg_nhue * fg_nlightness
!!$      Background  H: blue -> magenta (i.e. slow to fast)
!!$                  L: constant (e.g. 0.3)
!!$                  S: constant (e.g. 0.3)
!!$                  Number of bg colors = bg_nhue
!!$      Total colors = fg_nhue * fg_nlightness + bg_nhue (default 18*12+20=236)
!!$
!!$ NOTE: The log mode displays more data using higher lightness colors.
!!$
!!$=head1 AUTHOR
!!$
!!$          Lin, I-Ching 'Michael'     
!!$         Allied Geophysics Laboratories
!!$         Department of Computer Science
!!$         University of Houston
!!$
!!$=head1 CATEGORY
!!$
!!$B<sep_graphics>
!!$
!!$=cut
!!$
! DATE: September 15, 2002
! LAST UPDATE: November 17, 2002
! 
!***************************************************************************

!___________________________________________________________________________
! access the sep module
!___________________________________________________________________________
PROGRAM plot_2c_snapshot
USE sep
use sep_3d_mod

IMPLICIT NONE
!___________________________________________________________________________
! general variables used in defining the color table
!___________________________________________________________________________
REAL               :: hue,lightness,saturation ! hls color model
INTEGER            :: nbg                      ! number of background colors
INTEGER            :: nfg                      ! number of foreground colors
INTEGER            :: icolor                   ! color map index
INTEGER            :: tcolor                   ! total number of colors
INTEGER            :: nhue                     ! number of hues
INTEGER            :: nlightness               ! number of lightnesses
INTEGER            :: jhue                     ! hue index
INTEGER            :: jlightness               ! lightness index
REAL               :: dhue                     ! hue increment in degrees
REAL               :: dlightness               ! lightness increment   
REAL               :: max_lightness            ! maximum value of lightness
REAL               :: min_lightness            ! minimum value of lightness
INTEGER            :: j                        ! an index
!___________________________________________________________________________
! input argument variables
!___________________________________________________________________________
INTEGER            :: fg_linear_or_log ! clipping methods
                                       ! 1 for linear; 2 for logarithmic 
REAL               :: fg_clip_linear   ! percentage of max value of each snapshot 
                                       ! above which data will be clipped
INTEGER            :: fg_modulate_log  ! larger this variable is, more data will
                                       ! be displayed
                                       ! more points are plotted 
REAL               :: bg_max           ! background data max value
REAL               :: bg_min           ! background data min value

INTEGER            :: fg_nhue          ! foreground number of hue
INTEGER            :: fg_nlightness    ! foreground number of lightness
REAL               :: fg_max_lightness ! foreground maximum lightness
REAL               :: fg_min_lightness ! foreground minimum lightness
REAL               :: fg_saturation    ! foreground saturation

INTEGER            :: bg_nhue          ! background number of hue
REAL               :: bg_lightness     ! background lightness
REAL               :: bg_saturation    ! background saturation
!___________________________________________________________________________
! data operation variables
!___________________________________________________________________________
REAL               :: fg_max      ! foreground data max value
REAL               :: fg_dhue     ! forground hue increment in degrees
REAL               :: bg_dhue     ! background hue increment in degrees
REAL               :: dbg         ! bin size of background data
REAL               :: dfg         ! bin size of seismic data
REAL               :: amp_max     ! maximum amplitude for current snapshot
REAL               :: eps2 
!___________________________________________________________________________
! variables for input file #1, background
!___________________________________________________________________________
INTEGER            :: n1_f1
INTEGER            :: n2_f1
INTEGER            :: n3_f1
REAL               :: d1_f1
REAL               :: d2_f1
REAL               :: d3_f1
REAL               :: o1_f1
REAL               :: o2_f1
REAL               :: o3_f1
INTEGER            :: esize_f1
!___________________________________________________________________________
! variables for input file #2, dx
!___________________________________________________________________________
INTEGER            :: n1_f2
INTEGER            :: n2_f2
INTEGER            :: n3_f2
REAL               :: d1_f2
REAL               :: d2_f2
REAL               :: d3_f2
REAL               :: o1_f2
REAL               :: o2_f2
REAL               :: o3_f2
INTEGER            :: esize_f2
!___________________________________________________________________________
! variables for input file #3, dy
!___________________________________________________________________________
INTEGER            :: n1_f3
INTEGER            :: n2_f3
INTEGER            :: n3_f3
REAL               :: d1_f3
REAL               :: d2_f3
REAL               :: d3_f3
REAL               :: o1_f3
REAL               :: o2_f3
REAL               :: o3_f3
INTEGER            :: esize_f3
!___________________________________________________________________________
! variables for output
!___________________________________________________________________________
INTEGER            :: n1
INTEGER            :: n2
INTEGER            :: n3
REAL               :: d1
REAL               :: d2
REAL               :: d3
REAL               :: o1
REAL               :: o2
REAL               :: o3
INTEGER            :: esize
!___________________________________________________________________________
! operation variables
!___________________________________________________________________________
INTEGER            :: x_first
INTEGER            :: x_last
INTEGER            :: y_first
INTEGER            :: y_last
INTEGER            :: z_first
INTEGER            :: z_last
INTEGER            :: x
INTEGER            :: y
INTEGER            :: z
REAL               :: start_time  ! first time to be processed in (s)
REAL               :: end_time    ! last time to be processed in (s)
!___________________________________________________________________________
! allocatable arrays
!___________________________________________________________________________
REAL,    ALLOCATABLE, DIMENSION(:,:)   :: in_f1
REAL,    ALLOCATABLE, DIMENSION(:,:)   :: in_f2
REAL,    ALLOCATABLE, DIMENSION(:,:)   :: in_f3
REAL,    ALLOCATABLE, DIMENSION(:,:)   :: amp  
REAL,    ALLOCATABLE, DIMENSION(:,:)   :: out_f
!___________________________________________________________________________
! file names                                     
!___________________________________________________________________________
CHARACTER(len=255) :: fn_color ! output 2d hue_lightness color file name
CHARACTER(len=255) :: fn_f1
CHARACTER(len=255) :: fn_f2
CHARACTER(len=255) :: fn_f3
!CHARACTER(len=255) :: fn_prt ! for .DRIBBLE
!___________________________________________________________________________
! control variables                              
!___________________________________________________________________________
INTEGER            :: nwords             ! number of words
INTEGER            :: allocation_status  ! return code for Fortran90 ALLOCATE command
INTEGER            :: input_error        ! error counter
INTEGER, PARAMETER :: stderr=0           ! stderr unit
INTEGER, PARAMETER :: lu_color_map=90    ! 2d overlay_map color unit
INTEGER, PARAMETER :: luprt=91           ! printer and stderr units
REAL,    PARAMETER :: rad2deg=180./3.1415926 ! convert from radians to degrees
REAL,    PARAMETER :: UNDEFINED=-99999.  ! floating point znull value
CHARACTER (len=1), PARAMETER :: qu='"'   ! quotation mark
CHARACTER (LEN=1)  :: char1              ! dummy character to read 'y' or 'n'
LOGICAL            :: iesx               ! IF==.TRUE. generate iesx format
LOGICAL            :: wr_outfile         ! IF=.TRUE. write out an output file
LOGICAL            :: verb               ! IF .TRUE. be verbose
!___________________________________________________________________________
! timing and op count arrays. make these double precision to avoid
! truncation errors.
!___________________________________________________________________________
REAL*8 :: last_time(0:20)        ! last time clock was called for a given operation
REAL*8 :: total_time(0:20)=1.e-3 ! sum of time for a given operation.
!___________________________________________________________________________
! initialize the intrinsic Fortran 90 time counter.
!___________________________________________________________________________
!CALL inittime(last_time(0))
!___________________________________________________________________________
! read command line arguments
!___________________________________________________________________________
call SEP_ADD_DOC()
CALL sep_init('')
!call doc()

write(0,*)"b4 params" 

call from_param("verb",verb,.false.)
CALL from_param('fn_color',fn_color,'plot_2c_snapshot.color')
CALL from_param('vel',fn_f1,'NONE')
CALL from_param('data',fn_f2,'NONE')
CALL from_param('data2',fn_f3,'NONE')

CALL from_param('fg_linear_or_log',fg_linear_or_log,1)
CALL from_param('fg_clip_linear',fg_clip_linear,0.5)
CALL from_param('fg_modulate_log',fg_modulate_log,10000)

CALL from_param('bg_min',bg_min,UNDEFINED)
CALL from_param('bg_max',bg_max,UNDEFINED)

CALL from_param('fg_nhue',fg_nhue,18)
CALL from_param('fg_nlightness',fg_nlightness,12)
CALL from_param('fg_max_lightness',fg_max_lightness,0.8)
CALL from_param('fg_min_lightness',fg_min_lightness,0.3)
CALL from_param('fg_saturation',fg_saturation,1.0)

CALL from_param('bg_nhue',bg_nhue,20)
CALL from_param('bg_lightness',bg_lightness,0.3)
CALL from_param('bg_saturation',bg_saturation,0.3)

!CALL from_param('fn_prt',fn_prt,'plot_2c_snapshot.DRIBBLE')
CALL from_param('IESX',char1,'n')
iesx=(char1 == 'y')

write(0,*)"after params" 
tcolor=fg_nhue*fg_nlightness+bg_nhue
!___________________________________________________________________________
! check that minimum number of file names are supplied
! check input parameters
!___________________________________________________________________________
input_error=0
!IF(tcolor > 256) THEN
!   WRITE(stderr,*) 'too many colors for SEP software!'
!   input_error=input_error+1
!END IF
IF(fn_f1 == 'NONE') THEN 
   input_error=input_error+1
   WRITE(stderr,*) 'error! must enter the component of input vector file name after ', &
                   qu//'fn_f1='//qu, ' on the command line!'
END IF
IF(fn_f2 == 'NONE') THEN 
   input_error=input_error+1
   WRITE(stderr,*) 'error! must enter the component of input vector file name after ', &
                   qu//'fn_f2='//qu, ' on the command line!'
END IF
!IF(fn_f3 == 'NONE') THEN 
!   input_error=input_error+1
!   WRITE(stderr,*) 'error! must enter the component of input vector file name after ', &
!                   qu//'fn_f3='//qu, ' on the command line!'
!END IF
IF(bg_max == UNDEFINED) THEN 
   WRITE(stderr,*) 'no default for bg_max! must be entered on command line!'
   WRITE(stderr,*) 'run Attr < fn_f1 , come up with a reasonable value and resubmit'
   input_error=input_error+1
END IF
IF(bg_min == UNDEFINED) THEN 
   WRITE(stderr,*) 'no default for bg_min! must be entered on command line!'
   WRITE(stderr,*) 'run Attr < fn_f1 , come up with a reasonable value and resubmit'
   input_error=input_error+1
END IF
IF(input_error > 0) THEN
   WRITE(stderr,*) 'program terminated due to ',input_error,' input errors'
   STOP 'check command line arguments and resubmit!'
END IF
!___________________________________________________________________________
! here is the color table
!___________________________________________________________________________
if(verb) WRITE(stderr,'(/)')
OPEN(lu_color_map,file=fn_color,status='UNKNOWN')
IF(iesx) THEN
if(verb)    WRITE(stderr,*) 'generate IESX format color tables'
ELSE
if(verb)    WRITE(stderr,*) 'generate SEP format color tables'
END IF
!___________________________________________________________________________
! first
! foreground colors: fg_nhue * fg_nlightness
!					(from low to high lightnesses)
!___________________________________________________________________________
icolor=0
!WRITE(stderr,'(/,i5,6a8)') 'color','h','l','s','r','g','b'
fg_dhue=360./(fg_nhue)
max_lightness=fg_max_lightness
min_lightness=fg_min_lightness
nlightness=fg_nlightness
dlightness=(max_lightness-min_lightness)/(nlightness-1)
saturation=fg_saturation
DO jhue=0,fg_nhue-1
   hue=jhue*fg_dhue	! blue first then mag...
   DO jlightness=0, nlightness-1	! lower lightness first
      lightness=min_lightness+jlightness*dlightness
      CALL write_out_color(icolor, hue, lightness, saturation, iesx)
      icolor=icolor+1
   END DO
END DO
!___________________________________________________________________________
! background colors: blue -> cyan -> green -> yellow -> red -> mag
!___________________________________________________________________________
nbg=bg_nhue
bg_dhue=300./(nbg-1)
DO jhue=0,nbg-1
   hue=-jhue*bg_dhue	! blue first
   IF (hue<0.) hue=hue+360.
   IF (hue> 360.) hue=hue-360.
   saturation=bg_saturation
   lightness=bg_lightness
   CALL write_out_color(icolor, hue, lightness, saturation, iesx)
   icolor=icolor+1
END DO

CLOSE(lu_color_map)
if(verb) WRITE(stderr,'(/)')
if(verb) WRITE(stderr,*) 'normal completetion. routine color_map'
!___________________________________________________________________________
!  read input data description from the history file #1
!___________________________________________________________________________
CALL from_aux(fn_f1,'n1',n1_f1)
CALL from_aux(fn_f1,'n2',n2_f1)
CALL from_aux(fn_f1,'n3',n3_f1)
CALL from_aux(fn_f1,'d1',d1_f1)
CALL from_aux(fn_f1,'d2',d2_f1)
CALL from_aux(fn_f1,'d3',d3_f1)
CALL from_aux(fn_f1,'o1',o1_f1)
CALL from_aux(fn_f1,'o2',o2_f1)
CALL from_aux(fn_f1,'o3',o3_f1)
CALL from_aux(fn_f1,'esize',esize_f1)
!___________________________________________________________________________
! read input data description from the history file #2
!___________________________________________________________________________
CALL from_aux(fn_f2,'n1',n1_f2)
CALL from_aux(fn_f2,'n2',n2_f2)
CALL from_aux(fn_f2,'n3',n3_f2)
CALL from_aux(fn_f2,'d1',d1_f2)
CALL from_aux(fn_f2,'d2',d2_f2)
CALL from_aux(fn_f2,'d3',d3_f2)
CALL from_aux(fn_f2,'o1',o1_f2)
CALL from_aux(fn_f2,'o2',o2_f2)
CALL from_aux(fn_f2,'o3',o3_f2)
CALL from_aux(fn_f2,'esize',esize_f2)
!___________________________________________________________________________
! read input data description from the history file #3
!___________________________________________________________________________
if(fn_f3(1:4) .ne. "NONE") then
CALL from_aux(fn_f3,'n1',n1_f3)
CALL from_aux(fn_f3,'n2',n2_f3)
CALL from_aux(fn_f3,'n3',n3_f3)
CALL from_aux(fn_f3,'d1',d1_f3)
CALL from_aux(fn_f3,'d2',d2_f3)
CALL from_aux(fn_f3,'d3',d3_f3)
CALL from_aux(fn_f3,'o1',o1_f3)
CALL from_aux(fn_f3,'o2',o2_f3)
CALL from_aux(fn_f3,'o3',o3_f3)
CALL from_aux(fn_f3,'esize',esize_f3)
!___________________________________________________________________________
! compare for consistency (limited)
!___________________________________________________________________________
IF(n1_f2 /= n1_f3 .OR. n2_f2 /= n2_f3 .OR. n3_f2 /= n3_f3 .OR. &
   d1_f2 /= d1_f3 .OR. d2_f2 /= d2_f3 .OR. d3_f2 /= d3_f3 .OR. &
   o1_f2 /= o1_f3 .OR. o2_f2 /= o2_f3 .OR. o3_f2 /= o3_f3 .OR. &
   esize_f2 /= esize_f3) THEN
   WRITE(stderr,*) 'error! inconsistent history file values'
   WRITE(stderr,'(3a20)') 'variable','file #2','file #3'
   WRITE(stderr,'(a20,2i20)') 'n1',n1_f2,n1_f3,'n2',n2_f2,n2_f3, &
      'n3',n3_f2,n3_f3,'esize',esize_f2,esize_f3
   WRITE(stderr,'(a20,2f20.3)') 'd1',d1_f2,d1_f3,'d2',d2_f2,d2_f3, &
      'd3',d3_f2,d3_f3,'o1',o1_f2,o1_f3,'o2',o2_f2,o2_f3, &
      'o3',o3_f2,o3_f3
   STOP 'check file names and resubmit!'
END IF
end if
!___________________________________________________________________________
! set up for operations
!___________________________________________________________________________
n1=n1_f2;n2=n2_f2;n3=n3_f2; d1=d1_f2;d2=d2_f2;d3=d3_f2;
o1=o1_f2;o2=o2_f2;o3=o3_f2; esize=esize_f2

y_first=NINT(o2)
y_last=y_first+n2-1
z_first=NINT(o3)
z_last=z_first+n3-1
!___________________________________________________________________________
!  read other parameters from the command line (not yet available)
!___________________________________________________________________________
CALL from_param('start_time',start_time,o1)
CALL from_param('end_time',end_time,o1+(n1-1)*d1)

x_first=NINT(MAX(start_time-o1,0.)/d1)
x_last=NINT(MIN(end_time-o1,(n1-1)*d1)/d1)
!___________________________________________________________________________
! allocate arrays 
!___________________________________________________________________________
nwords=(x_last-x_first+1)*(y_last-y_first+1)
if(verb) WRITE(stderr,'(/)')
if(verb) WRITE(stderr,*) 'go allocate ',nwords,' of memory for dx, dy, and...'
ALLOCATE(in_f1(x_first:x_last,y_first:y_last), &
         in_f2(x_first:x_last,y_first:y_last), &
         in_f3(x_first:x_last,y_first:y_last), &
         amp(x_first:x_last,y_first:y_last), &
         out_f(x_first:x_last,y_first:y_last), &
        STAT=allocation_status)
IF(allocation_status /= 0) STOP 'could not allocate memory for ux, uy,...'
if(verb) WRITE(stderr,*) 'memory successfully allocated!'
!___________________________________________________________________________
! open files
!___________________________________________________________________________
!write(stderr,*) 'open output printer file name. fn_prt = ',fn_prt
!OPEN(file=fn_prt,unit=luprt,status='UNKNOWN')
!___________________________________________________________________________
! echo out input and derived control parameters.
!___________________________________________________________________________
!WRITE(luprt,'(/,a,/)') 'TEMPORAL parameters'
!WRITE(luprt,'(a,t40,i5)') 'number of input samples (nt)',n1
!WRITE(luprt,'(a,t40,i5)') 'first output sample',x_first
!WRITE(luprt,'(a,t40,i5)') 'last output sample',x_last
!WRITE(luprt,'(a,t40,f12.6)') 'output start time (s)',start_time
!WRITE(luprt,'(a,t40,f12.6)') 'output end time (s)',end_time
!WRITE(luprt,'(a,t40,f12.6)') 'input data sample interval (sec)',d1

!WRITE(luprt,'(/,a,/)') 'IN LINE parameters'
!WRITE(luprt,'(a,t40,i5)') 'number of cdps per line',n2
!WRITE(luprt,'(a,t40,i5)') 'first_cdp',y_first,'last_cdp',y_last
!WRITE(luprt,'(a,t40,f12.6)') 'inline trace spacing dx (m)',d2   
  
!WRITE(luprt,'(/,a,/)') 'CROSS LINE PARAMETERS'  
!WRITE(luprt,'(a,t40,i5)') 'number of lines',n3
!WRITE(luprt,'(a,t40,i5)') 'first_line',z_first,'last_line',z_last
!WRITE(luprt,'(a,t40,f12.6)') 'crossline trace spacing dy (m)',d3   
!WRITE(luprt,*)' '
!CLOSE(lu_prt)
!___________________________________________________________________________
! write out the history files defining the size of the output.
!___________________________________________________________________________
o1=start_time
o2=y_first
o3=z_first

   if(0.ne. sep_put_data_axis_par("out",1,n1,o1,d1,""))&
     call seperr("put data axis")
   if(0.ne. sep_put_data_axis_par("out",2,n2,o2,d2,""))&
     call seperr("put data axis")
   if(0.ne. sep_put_data_axis_par("out",3,n3,o3,d3,""))&
     call seperr("put data axis")
!___________________________________________________________________________
! force processing range to fall within the range of the input data
!___________________________________________________________________________
dbg=(bg_max-bg_min)/(nbg-1)
!___________________________________________________________________________
! read in background
!___________________________________________________________________________
CALL sep_read(in_f1(:,:),fn_f1)
!___________________________________________________________________________
! convert the floating point data into bins
!  1) clip the data that falls beyond (bg_min < bg < bg_max)
!  2) divide by dbg
!___________________________________________________________________________
in_f1(:,:)=MIN(in_f1(:,:),bg_max)
in_f1(:,:)=MAX(in_f1(:,:),bg_min)
in_f1(:,:)=NINT((in_f1(:,:)-bg_min)/dbg)
!___________________________________________________________________________
! read in a 2D x-y slice, one at a time
!___________________________________________________________________________
if(verb) WRITE(stderr,'(/)')
loop_over_lines: DO z=z_first,z_last
!___________________________________________________________________________
! read in dx and dy data files 
!___________________________________________________________________________
!   CALL inittime(last_time(1))
if(verb)    WRITE(stderr,*) ' z_first, z, z_last ', &
                       z_first, z, z_last
   CALL sep_read(in_f2(:,:),fn_f2)
   if(fn_f3(1:4).ne. "NONE") then
     CALL sep_read(in_f3(:,:),fn_f3)
   else
       in_f3=0
   end if
   IF(z < z_first) CYCLE loop_over_lines ! would never happen!!!
!   CALL addtime(total_time(1),last_time(1))
!___________________________________________________________________________
! convert the floating point data into bins
!  1) define amp as the sqrt of the sum of the squares
!  2) clip the data that falls beyond fg_max
!  3) divide by dfg to form lightness bins
!___________________________________________________________________________
!   CALL inittime(last_time(2))
!___________________________________________________________________________
! clipping methods
!___________________________________________________________________________
   IF (fg_linear_or_log == 1) THEN
      amp(:,:)=SQRT(in_f2(:,:)**2+in_f3(:,:)**2)
      amp_max=MAXVAL(amp(:,:))
   call from_param("amp_max",amp_max,amp_max)
      fg_max=fg_clip_linear*amp_max
   ELSE
      eps2=1.e-20
      amp(:,:)=LOG((fg_modulate_log*in_f2(:,:))**2+(fg_modulate_log*in_f3(:,:))**2+eps2)
      amp_max=MAXVAL(amp(:,:))
   call from_param("amp_max",amp_max,amp_max)
      fg_max=1.0*amp_max
   END IF

   dfg=fg_max/fg_nlightness 
   amp(:,:)=MIN(fg_max,amp(:,:))
   DO y=y_first,y_last
      DO x=x_first,x_last
         IF (amp(x,y) < dfg ) THEN
            out_f(x,y)=in_f1(x,y)+fg_nhue*fg_nlightness
         ELSE
            hue=ATAN2(in_f3(x,y),in_f2(x,y))*rad2deg+fg_dhue/2.
            IF (hue < 0.0) hue=hue+360
            jhue=FLOOR(hue/fg_dhue)
            jlightness=FLOOR(amp(x,y)/dfg)-1 
            jlightness=MIN(jlightness,fg_nlightness-1)
            out_f(x,y)=jhue*fg_nlightness+jlightness	
         END IF
      END DO
   END DO

!   CALL addtime(total_time(2),last_time(2))
!___________________________________________________________________________
! write the results to disk.
!___________________________________________________________________________
!   CALL inittime(last_time(3))
   CALL sep_write(out_f(:,:))
!   CALL addtime(total_time(3),last_time(3))
END DO loop_over_lines
  
if(verb) WRITE(stderr,*) 'end loop over lines'
!___________________________________________________________________________
! calculate the end time.
!___________________________________________________________________________
!CALL addtime(total_time(0),last_time(0))
!___________________________________________________________________________
! print out run time statistics.
!___________________________________________________________________________
if(verb) WRITE(stderr,'(a40,a12)') 'task','time (s)'
if(verb) WRITE(stderr,'(a40,f12.0)')                &
  ' read data',total_time(1),              &
  ' calculate composite',total_time(2),    &
  ' write results to disk',total_time(3),  &
  ' total time',total_time(0)
!___________________________________________________________________________
! deallocate arrays 
!___________________________________________________________________________
DEALLOCATE(in_f1,in_f2,in_f3,out_f,STAT=allocation_status)
IF(allocation_status /= 0) STOP 'could not deallocate arrays'

if(verb) WRITE(stderr,*) 'normal completetion. routine plot_2c_snapshot'


!___________________________________________________________________________
! This subroutine converts a color from HLS to RGB 
!___________________________________________________________________________
CONTAINS

SUBROUTINE write_out_color(icolor, hue, lightness, saturation, iesx)
use sep_3d_Mod
INTEGER, INTENT(IN) :: icolor
REAL, INTENT(IN)    :: hue, lightness, saturation
LOGICAL, INTENT(IN) :: iesx
REAL                :: red, green, blue
REAL                :: chue

! correction for using hls_to_rgb function
! in our program, zero degree is blue
! in hls_to_rgb called function, zero degree is red
chue=hue-120.
IF (chue<0.) chue=chue+360.

CALL hls_to_rgb(chue,lightness,saturation,red,green,blue)
if(verb) WRITE(stderr,'(i5,6f8.3)') icolor,hue,lightness,saturation,red,green,blue
IF(iesx) THEN
   WRITE(lu_color_map,'(i5,3i8)') icolor,NINT(red*255),NINT(green*255), &
								NINT(blue*255)
ELSE
   WRITE(lu_color_map,'(i5,3f8.3)') icolor,red,green,blue
END IF

END SUBROUTINE write_out_color

          
END PROGRAM plot_2c_snapshot
subroutine hls_to_rgb ( h, l, s, r, g, b )
!
!*******************************************************************************
!
!! HLS_TO_RGB converts HLS to RGB color coordinates.
!
!
!  Definition:
!
!    The HLS color system describes a color based on the qualities of
!    hue, lightness, and saturation.  A particular color has three 
!    coordinates, (H,L,S).  The L and S coordinates must be between
!    0 and 1, while the H coordinate must be between 0 and 360, and
!    is interpreted as an angle.
!
!    The RGB color system describes a color based on the amounts of the 
!    base colors red, green, and blue.  Thus, a particular color
!    has three coordinates, (R,G,B).  Each coordinate must be between
!    0 and 1.  
!
!  Reference:
!
!    Foley, van Dam, Feiner, and Hughes,
!    Computer Graphics, Principles and Practice,
!    Addison Wesley, Second Edition, 1990.
!
!  Modified:
!
!    29 August 1998
!
!  Author:
!
!    John Burkardt
!
!  Parameters:
!
!    Input, real H, L, S, the HLS color coordinates to be converted.
!
!    Output, real R, G, B, the corresponding RGB color coordinates.
!
  real b
  real g
  real h
  real hls_value
  real l
  real m1
  real m2
  real r
  real s
!
  if ( l <= 0.5 ) then
    m2 = l + l * s
  else
    m2 = l + s - l * s
  end if

  m1 = 2.0 * l - m2

  if ( s == 0.0 ) then
    r = l
    g = l
    b = l
  else
    r = hls_value ( m1, m2, h + 120.0 )
    g = hls_value ( m1, m2, h )
    b = hls_value ( m1, m2, h - 120.0 )
  end if

  return
end
function hls_value ( n1, n2, h )
!
!*******************************************************************************
!
!! HLS_VALUE is a utility function used by HLS_TO_RGB.
!
!
!  Reference:
!
!    Foley, van Dam, Feiner, and Hughes,
!    Computer Graphics, Principles and Practice,
!    Addison Wesley, Second Edition, 1990.
!
!  Modified:
!
!    29 August 1998
!
!  Author:
!
!    John Burkardt
!
!  Parameters:
!
!    Input, real N1, N2, H.
!
!    Output, real HLS_VALUE.
!
  real h
  real hls_value
  real hue
  real n1
  real n2
  real r_modp
!
!  Make sure HUE lies between 0 and 360.
!
  hue = r_modp ( h, 360.0 )

  if ( hue < 60.0 ) then
    hls_value = n1 + ( n2 - n1 ) * hue / 60.0
  else if ( hue < 180.0 ) then
    hls_value = n2
  else if ( hue < 240.0 ) then
    hls_value = n1 + ( n2 - n1 ) * ( 240.0 - hue ) / 60.0
  else
    hls_value = n1
  end if

  return
end
function r_modp ( x, y )
!
!*******************************************************************************
!
!! R_MODP returns the nonnegative remainder of real division.
!
!
!  Formula:
!
!    If 
!      REM = R_MODP ( X, Y ) 
!      RMULT = ( X - REM ) / Y
!    then
!      X = Y * RMULT + REM
!    where REM is always nonnegative.
!
!  Comments:
!
!    The MOD function computes a result with the same sign as the
!    quantity being divided.  Thus, suppose you had an angle A,
!    and you wanted to ensure that it was between 0 and 360.
!    Then mod(A,360.0) would do, if A was positive, but if A
!    was negative, your result would be between -360 and 0.
!
!    On the other hand, R_MODP(A,360.0) is between 0 and 360, always.
!
!  Examples:
!
!        I         J     MOD   R_MODP   R_MODP Factorization
! 
!      107        50       7       7    107 =  2 *  50 + 7
!      107       -50       7       7    107 = -2 * -50 + 7
!     -107        50      -7      43   -107 = -3 *  50 + 43
!     -107       -50      -7      43   -107 =  3 * -50 + 43
!
!  Modified:
!
!    29 August 1998
!
!  Author:
!
!    John Burkardt
!
!  Parameters:
!
!    Input, real X, the number to be divided.
!
!    Input, real Y, the number that divides X.
!
!    Output, real R_MODP, the nonnegative remainder when X is divided by Y.
!
  real r_modp
  real x
  real y
!
  if ( y == 0 ) then
    write ( *, * ) ' '
    write ( *, * ) 'R_MODP - Fatal error!'
    write ( *, * ) '  R_MODP ( X, Y ) called with Y = ', y
    stop
  end if

  r_modp = mod ( x, y )

  if ( r_modp < 0.0 ) then
    r_modp = r_modp + abs ( y )
  end if

  return
end
