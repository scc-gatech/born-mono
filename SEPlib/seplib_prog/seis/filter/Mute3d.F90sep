!!$
!!$=head1 NAME
!!$
!!$Mute3d - Muting in sep3d datasets
!!$
!!$=head1 SYNOPSIS
!!$
!!$Mute3d  <in.H >out.H pars
!!$
!!$=head1 INPUT PARAMETERS
!!$
!!$=over 4
!!$
!!$=item  verb   -  integer
!!$
!!$       [0] Whether (1) or not(0) to be verbose
!!$
!!$=item  maxsize-  integer
!!$
!!$       [10]Number of megabytes of traces to hold
!!$
!!$=item  vmute    -  float
!!$
!!$       [1.45] -  Outer mute velocity
!!$        0.0   -  Flat mute in offset
!!$
!!$=item  tmute    -  float
!!$
!!$       [0.0]  start time of (hyperbolic) outer mute
!!$
!!$=item  tramp    -  float
!!$
!!$       [0.25]  linear mute time ramp in seconds
!!$
!!$=item  off_keys- integer(:)
!!$
!!$       Offset float key(s) describing
!!$
!!$=item  off_axes- integer(:)
!!$
!!$       Offset axes
!!$
!!$=back
!!$
!!$
!!$
!!$=head1 DESCRIPTION
!!$
!!$  Performs Muting on regular or irregular dataset
!!$
!!$=head1 SEE ALSO
!!$
!!$L<NMO>, L<Velan3d>
!!$
!!$=head1 COMMENTS
!!$
!!$ off_keys and off_axes, are somewhat optional
!!$ If none of these are suplied checks keys and then axes for
!!$ aoffset, offset_x, and offset_y.
!!$
!!$ If you supply a key number > key number of data_record_number subtract 1
!!$ to the parameter (data_record_number is not stored with the headers)
!!$
!!$=head1 CATEGORY
!!$
!!$B<seis/velan>
!!$
!!$=cut
!Author: Robert Clapp, ESMB 463, 7230253
!
!Date Created:Mon Jul 4 16:41:21 1998
!Purpose:
!--------------------------------------------------------------------------------
! MODIFICATIONS:
!  9 May 2003 -- Morgan Brown -- Fixed docs
!                             -- Added vmute=0.0 (flat mute) option
!--------------------------------------------------------------------------------
!--------------------------------------------------------------------------------
program Mute3d  
  use sep
  use sep_3d_mod
  use sep3d_struct_mod
  use helixcartmod
!DATA VARIABLES
  implicit none
  type(sep3d)         ::  in,out
  real,allocatable    ::  input(:,:),output(:,:)
  integer,allocatable ::  n_data(:)
  real,allocatable    ::  o_data(:),d_data(:)
  real,allocatable    ::  offset(:)
  real,allocatable    ::  data_keyvals(:,:)
!VELOCITY
  type(sep3d)         ::  slow
  real,allocatable    ::  slowness(:,:,:)
  logical             ::  slowfile,havefile,first,first_nmo
  integer             ::  ns(3),ipct
  real                ::  os(3),ds(3),maxi,pct
  real,allocatable    ::  vel_keyvals(:,:)
  integer             ::  nvel_tr
  real,allocatable    ::  slow_tr(:)
!PARAMETERS
  logical             ::  verb,debug
  integer             ::  maxsize
  integer             ::  n_off_keys,off_keys(9)
  integer             ::  n_off_axes,off_axes(9)
  integer             ::  n_vel_axes,vel_axes(9)
  integer             ::  n_vel_key,vel_key(9)
  integer             ::  ncompare,ipct_print
!EXTERNALS
!COUNTING,TEMPS
  integer             ::  tempi,temp2i
  integer             ::  i1,i2,b2,e2                   
  !counting variable
  integer             ::  ierr                          
  !error checking
  integer             ::  nh,nhelix(2),read,ntr,block,tot  
  !size references
  integer             :: nread(2) ,i
  integer, parameter  :: dp=selected_int_kind(16)
  integer(kind=dp)    :: mybig
  integer,allocatable ::  ipos(:)
  real                ::  tempr,current(2),tmute0,vmute,tramp,tmute
  real,allocatable    ::  tempra(:),scale(:)
  logical             ::  run_it
  integer             ::  iramp,it,ie
  integer             :: nt
  integer :: drn
  real                :: ot,dt
!--------------------------------------------------------------------------------
!INITIALIZE
  call SEP_ADD_DOC()
  call sep_init('')
  call init_3d()
  call init_sepf90()
  call sep_begin_prog()
!###################
!generic parameters#
!###################
  call from_param("verb",verb,.false.)
  call from_param("tmute",tmute0,0.)
  call from_param("vmute",vmute,1.45)
  call from_param("tramp",tramp,.25)
  call from_param("maxsize",maxsize,80)
!##########################
!LETS FIGURE OUT THE INPUT#
!##########################
  call init_sep3d("in",in,"INPUT")                   
  call init_sep3d(in,out,"OUTPUT")                   
  ! Initialize SEP3D structure
  ot=in%o(1)
  dt=in%d(1)
  nt=in%n(1)
  if (in%data_format(1:5).ne."FLOAT") then
    call erexit("only know how to handle float data")
  end if
!------------------------------------------------------------------------------
!FIGURE OUT HOW OFFSET IS DESCRIBED
!------------------------------------------------------------------------------
!------------------------------------------------------------------------------
! If not SEP77 data, check for user specified offset keys
!------------------------------------------------------------------------------
  if ( in%file_format(1:7) .ne. "REGULAR" ) then
    n_off_keys=getch("off_keys","d",off_keys)
  else
    n_off_keys=0
  end if
!------------------------------------------------------------------------------
! If the user didn't specify offset keys see if they specified offset axes
!------------------------------------------------------------------------------
  if (n_off_keys.eq.0) then
! try to get the offset from the axes
    n_off_axes=getch("off_axes","d",off_axes)
!----------------------------------------------------------------------------
! No supplied offset axis information
!----------------------------------------------------------------------------
    if (n_off_axes.eq.0) then
!--------------------------------------------------------------------------
! still haven't found axes information, check for offset_x, offset_y, and
! aoffset in the headers
!--------------------------------------------------------------------------
      if ( in%file_format(1:7).ne."REGULAR" ) then
! Only for SEP3D
        if ( sep3d_key_index(in,"offset_x",off_keys(1)) ) then
          if (sep3d_key_index(in,"offset_y",off_keys(2)) ) then
            n_off_keys=2                            
            ! Found offset_x and offset_y
          else
            n_off_keys=1                                    
            ! Found offset_x only
          end if
        else if ( sep3d_key_index(in,"offset_y",off_keys(1)) ) then
          n_off_keys=1                                      
          ! Found offset_y only
        else if ( sep3d_key_index(in,"aoffset",off_keys(1)) ) then
          n_off_keys=1                                       
          ! Found aoffset only
        end if
        if (n_off_keys>0 .and. verb) then
          write(0,*) "Guessing offset keys as ",off_keys(1:n_off_keys)
        end if
      end if
!--------------------------------------------------------------------------
! Still not found: find offset_x, offset_y, and aoffset in axes label
!--------------------------------------------------------------------------
      if (n_off_keys.eq.0) then
        if ( sep3d_axis_index(in,"offset_x",off_axes(1)) ) then
          if ( sep3d_axis_index(in,"offset_y",off_axes(2)) ) then
            n_off_axes=2
          else
            n_off_axes=1
          end if
        else if ( sep3d_axis_index(in,"offset_y",off_axes(1)) ) then
          n_off_axes=1
        else if ( sep3d_axis_index(in,"aoffset",off_axes(1)) ) then
          n_off_axes=1
        end if
        if (n_off_axes>0 .and. verb) then
          write(0,*) "Guessing offset axes as ",off_axes(1:n_off_axes)
        end if
      end if
!--------------------------------------------------------------------------
! Either this is a SEP77 file, or we give up--no offset information
!--------------------------------------------------------------------------
      if (in%file_format.eq."REGULAR") then
! SEP77 file: default to Stretch behavior
        off_axes(1)=2
        n_off_axes=1
        if (verb) then
          write(0,*) "Regular dataset using offset axes 2"
        end if
      else if ( n_off_axes.eq.0 .and. n_off_keys.eq.0 ) then
        call seperr("I can not figure out offset use off_keys or off_axes"&
          &)
      end if
!----------------------------------------------------------------------------
! User supplied us with offset axis information
!----------------------------------------------------------------------------
    else
      if ( any(off_axes(1:n_off_axes) < 1 ) .or.   any(off_axes(1:n_off_axes&
        &) > in%ndims) ) then
        write(0,*) "ndims=",in%ndims," off_axes=",off_axes(1:n_off_axes&
          &)
        call seperr("Invalid offset axes")
      end if
      if (verb) then
        write(0,*) "Using offset axes=",off_axes(1:n_off_axes)
      end if
    end if
!------------------------------------------------------------------------------
! User supplied valid offset keys
!------------------------------------------------------------------------------
  else
    drn=sep_get_key_index("in","data_record_number",i1);
    if(drn==0) then
      do i=1,n_off_keys
        if(off_keys(i) > i1)  off_keys(i)=off_keys(i)-1
      end do
    end if
    

    if ( any(off_keys(1:n_off_keys) <1 ) .or.   any(off_keys(1:n_off_keys&
      &) >in%nkeys) ) then
      write(0,*) "nkeys=",in%nkeys," off_keys=",off_keys(1:n_off_keys)
      call seperr("Invalid offset keys")
    end if
    if (verb) then
      write(0,*) "Offset described by keys:",off_keys(1:n_off_keys)
    end if
  end if
!------------------------------------------------------------------------------
! OFFSET SHOULD BE SPECIFIED BY A KEY FOR A GRID FILE (irregular causes
! problem for helix loop)
  if ( n_off_axes>0 .and. in%file_format.eq."GRID") then
    call erexit("Must supply offset key if file format is grid")
  end if
! CHANGE THE NUMBER OF TRACES IF NECESSARY
  if (in%file_format.ne."REGULAR") then
      call to_history("n2",in%ntraces)
      call to_history("n3",1)
      call to_history("n4",1)
      call to_history("n5",1)
      call to_history("n6",1)
      call to_history("same_record_mumber",1)
  end if
! To handle arbirtrary size we are going to treat the dataset as a series of
! traces, or helixize axes 2 or greater (depending 2GB grid files) ...
  mybig=1
  do i=2,sep3d_ndims(in)
    mybig=mybig*in%n(i)
  end do 
  nhelix(1)=1
  i=2
  do while (mybig > 1000000000)
    nhelix(1)=in%n(i)*nhelix(1)
    mybig=mybig/in%n(i)
    i=i+1
  end do 
  nhelix(2)=mybig
  allocate(n_data(in%ndims),o_data(in%ndims),d_data(in%ndims),ipos&
    &(in%ndims))
  n_data=in%n
  d_data=in%d
  o_data=in%o
  call axis_allocate(in,3)
  in%n(1:3)=(/n_data(1),nhelix/)
  call sep3d_set_sep3d(in)
  call sep3d_inorder(out)
  call  sep3d_write_description("out",out)
  call axis_allocate(out,3)
  out%n(1:3)=(/n_data(1),nhelix/)
  call sep3d_set_sep3d(out)
!Figure out the maximum block of traces we want to process at once
  maxi=maxsize/real(product(in%n(1:2)))/4.
  maxsize=maxi*1000000.
  ntr=min(maxsize,product(in%n(2:3)))
  if (ntr .eq.0) then
    write(0,*) "MINIMUM MAXSIZE",real(product(in%n(1:2)))*4./1000.&
      &/1000.
    call erexit("ntr=0 increase memory")
  end if
  if (verb) then
    write(0,*) "NTRACES PROCESSED PER BLOCK=",ntr
  end if
!Allocate the input, output, comparison array, and temporary storage
  if (in%file_format.eq."REGULAR") then
    allocate(input(in%n(1),ntr*in%n(2)))
  else
    allocate(input(in%n(1),1))
  end if 
  allocate( slow_tr(in%n(1)) )
  allocate( tempra(ntr*in%n(2)), offset(ntr*in%n(2)) )
  allocate( data_keyvals(ntr*in%n(2),max(ncompare,1)) )
  data_keyvals=1
  current=1
  iramp=tramp/dt
  allocate(scale(iramp))
  do i1=1,iramp 
    scale(i1)=(dt*i1/(dt*iramp+1.e-20))
  end do
!------------------------------------------------------------------------------
! Main Loop over traces
!------------------------------------------------------------------------------
  read=0
  first=.true.
  tot=0
  first_nmo=.true.
  ipct_print=1
  do while (read<nhelix(2))
!loop until we are done
    block=min(nhelix(2)-read,ntr) !the block to read is
    if ( in%file_format.ne."REGULAR" ) then
! SEP3d - Grab headers
      call sep3d_grab_headers("in",in,nh,fwind=(/0,read/),nwind=(/in%n&
        &(2),block/))
      if (nh.ne.0) then
        if (nh>size(input,2)) then
          deallocate(input)
          allocate(input(in%n(1),nh))
        end if
        if (.not. sep3d_read_data("in",in,input(:,:nh))) then
          call erexit("trouble reading data")
        end if
      end if
    else
! SEP77 - read data block
      if ( 4*block*in%n(1) .ne. sreed("in",input,4*block*in%n(1)) )&
        & then
        call erexit("trouble reading data")
      end if
      nh=block
    end if 
    tot=		tot+nh
    if (debug) then
      write(0,*) "working from ",read," tot traces ",block," tr=",nh,"&
        & tot=",tot
    end if
    pct=100.*(1.*read)/(1.*nhelix(2))
    ipct=nint(pct)
    if (verb .and.  ipct >= ipct_print) then
      ipct_print=ipct+1
      write(0,*) pct,"=pct finish traces processed=",tot," of "&
        &,in%ntraces
    end if
    if (nh.ne.0) then
!now time to get the offset
      offset=0.
      if (n_off_keys>0) then
!offset described by keys
        do i1=1,n_off_keys 
          call sep3d_grab_key_vals(in,off_keys(i1),tempra)
          offset=offset+tempra**2
        end do 
        offset=sqrt(offset)
      else
!offset described by axes
        do i2=1,nh 
          call helix2cart(n_data(2:),i2+read,ipos(2:))
          do i1=1,n_off_axes 
            offset(i2)=						offset(i2)+(o_data(off_axes(i1))+(ipos&
              &(off_axes(i1))-1)*d_data(off_axes(i1)))**2
          end do
        end do 
        offset=sqrt(offset)
      end if 
!NOW LOOP OVER TRACES
      do i2=1,nh 
        if (vmute.eq.0.0) then
          tmute = tmute0
        else
          tmute=sqrt(max(0.,tmute0**2+offset(i2)**2/vmute**2))
        end if 
        it=min(nint((tmute-ot)/dt+1.),in%n(1))
        if (it >0) then
          input(1:it,i2)=0.
          ie=min(iramp,nt-it)
          if (ie.ne.0) then
            input(it+1:it+ie,i2)=input(it+1:it+ie,i2)*scale(1:ie)
          end if
!           write(0,*) "SCHCEK",scale(1:ie   )
        end if
      end do 
      if ( in%file_format.ne."REGULAR" ) then
        if(out%file_format(1:1).ne."R") then
          call sep3d_header_copy(in,out)
        end if
        call sep3d_coord_copy(in,out)
        call sep3d_inorder(out)
        if(.not. sep3d_write_data("out",out,input,nwind=(/in%n(1),in%n(2),block/),&
          fwind=(/0,0,read/))) then
          call seperr("trouble writing out ")
        end if 
      else
        if (nh*in%n(1)*4.ne. srite("out",input,nh*in%n(1)*4)) then
          call seperr("trouble writing out ")
        end if
      end if
    end if
    read=		read+block
  end do 
  call sep_end_prog()
end program  
