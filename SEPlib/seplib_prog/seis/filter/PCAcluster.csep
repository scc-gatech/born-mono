
 /*$
=head1 NAME

 PCAcluster - Apply principal component analysis on input gathers
 
=head1 SYNOPSIS

        PCAcluster < in.H [ev= vmat= ] > PCAvectors.H
 
=head1  INPUT PARAMETERS

=over 4

=item   ev - float array , dimension n2
             the list of eigenvalues corresponding to PCAvectors.H

=item   vmat - float matrix, dimension n2 x n2 
             the coefficients that reconstruct the input,
             i.e. in=u*PCAvectors

=back

=head1  DESCRIPTION

 PCAcluster treats the input as a set of n1 x n2 gathers and produces
 a set of output vectors in gathers of the same size, sorted by decreasing
 principal component eigenvalues.  Optionally, it can produce the list
 of principal component eigenvalues and/or the reconstruction coefficient
 matrix.
 
=head1  COMMENTS

       Assumes that n1 >= n2
 
=head1 CATEGORY

B<seis/filter>

=cut
  >*/

/*

  KEYWORDS   transform pca eigenvalue
 
   AUTHOR
       Adapted from Smooth by stew/stu 3 Nov 2016
 
   WHERE
       ./seis/transform/PCAcluster.csep
 
*/

#include <stdlib.h>
#include <stdio.h>
#include <seplib.h>

#include <cluster.h>

int main (int argc, char **argv, char **envp) 
{
	int n1,n2,n3,n4,n5,n6,ntotal,n12,n3out,nread;
        int i, j, i3, count;
	float **u,**v,*w;
	double **ud,**vd,*wd;
        int nrows, ncols;
        char ev[BUFSIZ];
        char vmat[BUFSIZ];

	/* SEP stuff to handle command line arguments and documentation */
	initpar (argc, argv); 
ADD_SEP_DOC
        sep_begin_prog();
	doc(SOURCE);

	/* get parameters */
	if (hetch("n1","d",&n1)==0) seperr("Need data n1\n");
	if (hetch("n2","d",&n2)==0) n2=1;
	if (hetch("n3","d",&n3)==0) n3=1;
	if (hetch("n4","d",&n4)==0) n4=1;
	if (hetch("n5","d",&n5)==0) n5=1;
	if (hetch("n6","d",&n6)==0) n6=1;

	ntotal=n3*n4*n5*n6; n12=n1*n2;

        if(0 < getch("ev eigenvals eigenvalues","s",ev)) {
          (void) auxputch("n1","i",&n2,"ev");
          (void) auxputch("n2","i",&n3,"ev");
          (void) auxputch("n3","i",&n4,"ev");
          (void) auxputch("n4","i",&n5,"ev");
          (void) auxputch("n5","i",&n6,"ev");
          j=1; (void) auxputch("n6","i",&j,"ev");
        } else {
          ev[0] = '\0';
        }
        if(0 < getch("vmat coeffmat coefficientmatrix","s",vmat)) {
          (void) auxputch("n1","i",&n2,"vmat");
          (void) auxputch("n2","i",&n2,"vmat");
          (void) auxputch("n3","i",&n3,"vmat");
          (void) auxputch("n4","i",&n4,"vmat");
          (void) auxputch("n5","i",&n5,"vmat");
          (void) auxputch("n6","i",&n6,"vmat");
        } else {
          vmat[0] = '\0';
        }

	/* allocate working space */
        nrows = n1;
        ncols = n2;
	u=(float **) calloc(n2,sizeof(float *));
	v=(float **) calloc(n2,sizeof(float *));
	ud=(double **) calloc(n2,sizeof(double *));
	vd=(double **) calloc(n2,sizeof(double *));
        u[0] = (float *) calloc(n1*n2,sizeof(float));
        v[0] = (float *) calloc(n2*n2,sizeof(float));
        ud[0] = (double *) calloc(n1*n2,sizeof(double));
        vd[0] = (double *) calloc(n2*n2,sizeof(double));
        for(i=1; i<n2; i++) {
           u[i] = u[0] + i*n1; 
           v[i] = v[0] + i*n2; 
           ud[i] = ud[0] + i*n1; 
           vd[i] = vd[0] + i*n2; 
        }
	w =(float *) calloc(n2,sizeof(float));
	wd =(double *) calloc(n2,sizeof(double));

	hclose();

        
	nread=0;
	for( i3=0; i3<ntotal; i3++ ) {
	   count = sreed("in", u[0], 4*n12 );
           for(i=0; i<n12; ++i) ud[0][i] = (double) (u[0][i]);
           pca(ncols,nrows,ud,vd,wd);
           for(i=0; i<n12; ++i) u[0][i] = (float) (ud[0][i]);
	   count = srite("out", u[0], 4*n12 );
           if(ev[0] != '\0') {
              for(i=0; i<n2; ++i) w[i] = (float) (wd[i]);
              count = srite("ev",w,4*n2);
           }
           if(vmat[0] != '\0') {
              for(i=0; i<(n2*n2); ++i) v[0][i] = (float) (vd[0][i]);
              count = srite("vmat",v[0],4*n2*n2);
           }
	} 

        free(ud[0]); free(u[0]); free(vd[0]); free(v[0]);
        free(ud); free(u); free(vd); free(v); free(w);

        sep_end_prog();
	return EXIT_SUCCESS;
}
