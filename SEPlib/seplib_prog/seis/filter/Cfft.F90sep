!!$
!!$=head1 NAME
!!$
!!$Cfft - complex fft
!!$
!!$=head1  DESCRIPTION
!!$
!!$Complex fast fourier transform
!!$
!!$=head1 SYNOPSIS
!!$
!!$Cfft < in.h > out.h
!!$
!!$=head1 INPUT PARAMETERS
!!$
!!$=over 4
!!$
!!$=item sign      - integer
!!$
!!$      [1]: forward transform
!!$      -1 : reverse transform (FDGP sign convention)
!!$
!!$=item  n1,n2,n3  - integer
!!$
!!$       input cube dimensions (complex data).
!!$       (n1 = 2*(ntime1/2+1) if in frequency domain)
!!$
!!$=item  esize     - integer   [8]
!!$
!!$=back
!!$
!!$=head1 EXAMPLES
!!$		Cfft < in.h sign=1 esize=8 > fft.h
!!$ 		Compute complex forward fft of input dataset in.H
!!$
!!$		Cfft < fft.h sign=-1 esize=8 > out.h
!!$ 		Compute complex inverse fft of input dataset fft.H
!!$
!!$=over 4
!!$
!!$=back
!!$
!!$=head1 SEE ALSO
!!$
!!$L<Ft3d>
!!$
!!$=head1 CATEGORY
!!$
!!$B<seis/filter>
!!$
!!$=cut
!>
! Author - Peter Mora
!  modified - Ray Abma
!             increased buffer sizes to match old version.
!
! ----------
!  Keyword:  Fourier-transform
! ----------
program the_program 
  use sep
  implicit none
  integer input,output,infd,outfd,ier,esize
  integer maxnt,ip,ix,np,nx,ierr,nt,iop
  complex, allocatable :: data(:)
  call SEP_ADD_DOC()
  call sep_init('')
  call sep_begin_prog()
! get input parameters
  call from_either("sign",iop,1)
  call from_history("n1",nt)
  iop=-iop
! allocate working space for a trace
  allocate(data(nt),stat=ierr)
  if (ierr.ne.0) then
    call erexit("trouble allocating data")
  end if
! get more input parameters and set defaults
  call from_history("n2",nx,1)
  call from_history("n3",np,1)
  call from_history("esize",esize,4)
  if(esize/=8) call seperr("expecting complex data")
! put standard SEP parameters back to the header file and close it
  call hclose()
! loop over planes
  do ip=1,np  
    do ix=1,nx  
      ier=sreed('in',data,esize*nt)	! read in a trace
      call sepcfft(data,nt,iop)		! compute fft
      ier=srite('out',data,esize*nt)	! write trace out
    end do
  end do 
  call sep_end_prog()
end program 
!################################################################
!	              Subroutine sepcfft                            #
!################################################################
!	complex one dimensional fast fourier transform              #
!################################################################
! Input:                                                        #
!  n:       number of samples in input 1-D array                #
!  iop:     =1 for forward transform                            #
!           =-1 for inverse transform                           #
!  x[n]     1-D array to be fft-transformed                     #
!                                                               #
! Output:                                                       #
!  x[n]     fft-transformed 1-D array                           #
!################################################################
subroutine sepcfft(x,n,iop)
  implicit none
  integer n
  complex x(n),y(16384),w,t
  save y
  integer i,j,k,k0,l,m,n2,inc,iop,last
  real pi,scale
  pi=3.1415965
  last=0
! compute trigonometric values
  if (last.ne.n) then
    last=n 
    call cexps(y,n)
  end if
! compute fast Fourier transform
  n2=n/2
  j=1
  do i=1,n  
    if (i<=j) then
      t=x(j) 
      x(j)=x(i) 
      x(i)=t
    end if
    m=n2
    do while  (j>m.and.m>=1)
      j=j-m 
      m=m/2
    end do 
    j=j+m
  end do 
  l=1
  do while (l<n)
    inc=l+l 
    k0=n/inc 
    k=1
    do m=1,l  
      w=cmplx(real(y(k)),-iop*aimag(y(k))) 
      k=k+k0
      do i=m,n,inc  
        t=w*x(i+l) 
        x(i+l)=x(i)-t 
        x(i)=x(i)+t
      end do
    end do 
    l=inc
  end do 
  if (iop<0) then
    scale=1./n
    do i=1,n  
      x(i)=x(i)*scale
    end do
  end if
  return
end subroutine 
!###################################################################
!	                  Subroutine cexps                             #
!###################################################################
!	             compute complex exponentials                      #
!###################################################################
! Input:                                                           #
!  n:       number of samples in input 1-D array                   #
!  y[n]     1-D array on which to compute the complex exponentials #
!                                                                  #
! Output:                                                          #
!  y[n]     1-D array of computed exponentials                     #
!###################################################################
subroutine cexps(y,n)
  implicit none
  integer last,i,j,n2,n
  complex y(n),z(16384)
  last=0
  if (n.eq.last) then
    do i=1,n  
      y(i)=z(i)
    end do
  else
    n2=n/2 
    last=n
    do i=1,n/4+1  
      y(i)=cmplx(cos((i-1)*3.14159265*2/n),0.)	
      z(i)=y(i)
    end do 
    do i=1,n/4+1  
      y(i)=cmplx(real(y(i)),real(y(n/4+2-i)))	
      z(i)=y(i)
    end do 
    do i=2,n/4  
      j=n2-i+2 
      y(j)=cmplx(-real(y(i)),aimag(y(i)))	
      z(j)=y(j)
    end do
  end if 
  return
end subroutine  
