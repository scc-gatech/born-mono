.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MATH 1"
.TH MATH 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
Math \- Perform mathematical operations on data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Math  pars >out.H    [pars]        Generic math routine
.PP
Rtoc  <in.H >out.H   [pars]        Real to complex
.PP
Cmplx  real.H imag.H >out.H [pars] Form complex from two files
.PP
Real  <in.H  >out.H  [pars]        Output just real part of complex file
.PP
Imag  <in.H  >out.H  [pars]        Output just imaginary part of complex file
.PP
Conj  <in.H  >out.H  [pars]        Form the conjugate of a complex number  
.PP
Cabs  <in.H  >out.H  [pars]        Output absolute value of complex number
.PP
Cabs2 <in.H  >out.H  [pars]        Output absolute value^2 of complex number
.PP
Pow   <in.H  >out.H pow=  [pars]   Data raised to power, sign preserved
.PP
Gpow <in.H >out.H gpow= [pars]  Data raised to power gpow
.PP
Add   file1.H file2.H file3.H mode=[sum],prod,div > out.H Add, multiply, or divide  datasets
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.Sh "Math"
.IX Subsection "Math"
.IP "exp      \- char*" 4
.IX Item "exp      - char*"
.Vb 1
\&      [file1] Expression to perfom on history files
.Ve
.IP "file[1..10] \- sepfile" 4
.IX Item "file[1..10] - sepfile"
.Vb 1
\&      [in]  Name of this history file
.Ve
.IP "exp_real \- char*" 4
.IX Item "exp_real - char*"
.Vb 1
\&      [exp]   If complex function for the real values
.Ve
.IP "exp_imag \- char*" 4
.IX Item "exp_imag - char*"
.Vb 1
\&      [exp]   If complex function for the imaginary values
.Ve
.Sh "Pow"
.IX Subsection "Pow"
.IP "pow      \-  float" 4
.IX Item "pow      -  float"
.Vb 1
\&      Power to raise data to
.Ve
.Sh "Gpow"
.IX Subsection "Gpow"
.RS 4
.IP "gpow      \-  float" 4
.IX Item "gpow      -  float"
.Vb 1
\&      Power to raise data to
.Ve
.RE
.RS 4
.Sh "Generic parameters"
.IX Subsection "Generic parameters"
.IP "maxsize  \-    int" 4
.IX Item "maxsize  -    int"
.Vb 1
\&      [20]   Maximum amount of memory to consume
.Ve
.IP "verb     \-    int" 4
.IX Item "verb     -    int"
.Vb 1
\&      [0]    Whether or not to be verbose
.Ve
.RE
.RS 4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Performs mathematical operation of seplib files
.Sp
Supported Functions (specified by @ at begining):
.Sp
\&\s-1COS\s0 \s-1SIN\s0 \s-1TAN\s0
\&\s-1ACOS\s0  \s-1ASIN\s0  \s-1ATAN\s0
\&\s-1COSH\s0  \s-1SINH\s0  \s-1INT\s0
\&\s-1EXP\s0 \s-1LOG\s0 \s-1SQRT\s0
\&\s-1ABS\s0 \s-1SGN\s0
.Sp
Example 1:  Add two real files
Math  file1=in file2=out2.H exp=file1+file2 >out.H
.Sp
Example 2: Tpow (2.) on one file
Math exp='file1^2' >out.H
.Sp
Example 3: Multiply two complex files
Math  file1=a.H file2=b.H exp_real='file1.re*file2.re\-file1.im*file2.im' 
  exp_imag='file1.re*file2.im+file1.im*file2.re'
.RE
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
Math is not automatically complex aware.
If you are doing addition,subtraction with files it
will do the right thing. If you are trying to multiplication
or division you need to code the exp_real and exp_imag yourself.
If you are using it with the old 'Add' functionality it will
do the correct thing.
.Sp
For most cases you can just go
Math exp='a.H+b.H' >c.H 
.Sp
Math is just a script interface Math_base the real workhorse
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Clip,Add
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fButil/vector\fR
