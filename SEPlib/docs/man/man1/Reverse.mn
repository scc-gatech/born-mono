.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "REVERSE 1"
.TH REVERSE 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
Rtm2d\- \- Reverse time migration or two\-way wave equation forward modeling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    Rtm2d par=parfile.P wavelet=wavelet.H Slow=slowness.H Data=data.H
\&       Image_X=image_x.H Image_Z=image_z.H
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.Vb 1
\&   [modeling]  :to do forward modeling
.Ve
.Sp
.Vb 1
\&  migration:to do reverse time migration
.Ve
.IP "extrapolate_oper\- char *" 4
.IX Item "extrapolate_oper- char *"
.Vb 1
\&     [fd]       : finite-difference method
.Ve
.Sp
.Vb 1
\&    fft       : psedu-spectral method
.Ve
.Sp
.Vb 1
\&    write_wave=y              : whether to write wavefield to harddisk or not$
.Ve
.IP "image_X  \- sepfile" 4
.IX Item "image_X  - sepfile"
.Vb 1
\&    [optional] horizontal Common Image Gathers
.Ve
.IP "image_Z  \- sepfile" 4
.IX Item "image_Z  - sepfile"
.Vb 1
\&    [optional]  vertical Common Image Gathers
.Ve
.IP "o_source  d_source n_source\- real, real, integer" 4
.IX Item "o_source  d_source n_source- real, real, integer"
.Vb 1
\&  [0.,10.,1]   sampling of Sources
.Ve
.IP "dt, nt_source \- real, integer" 4
.IX Item "dt, nt_source - real, integer"
.Vb 1
\&  [1500,.002]   sampling in time
.Ve
.IP "hx_min, dx_offset, n_off \- real, real, integer" 4
.IX Item "hx_min, dx_offset, n_off - real, real, integer"
.Vb 1
\&  [-100.,10.,200]   sampling of offset
.Ve
.IP "dz_image, nz_image : Sampling parameters for depth" 4
.IX Item "dz_image, nz_image : Sampling parameters for depth"
.PD 0
.IP "z_source, z_receiver: depth of source and receiver" 4
.IX Item "z_source, z_receiver: depth of source and receiver"
.IP "image_nhx, image_nhz: horizontal and vertical subsurface offset number of" 4
.IX Item "image_nhx, image_nhz: horizontal and vertical subsurface offset number of"
.IP "images x_min_wave, x_max_wave: aperture of the wavefield" 4
.IX Item "images x_min_wave, x_max_wave: aperture of the wavefield"
.IP "xcoe_taper, zcoe_taper: tapering boundary condition parameters" 4
.IX Item "xcoe_taper, zcoe_taper: tapering boundary condition parameters"
.IP "nx_bd_taper, z_bd_taper: thickness of tapering boundary condtion" 4
.IX Item "nx_bd_taper, z_bd_taper: thickness of tapering boundary condtion"
.IP "nop  : thickness of one-way wave equation boundary condtion" 4
.IX Item "nop  : thickness of one-way wave equation boundary condtion"
.IP "x_min_image, x_max_image: aperture of the image" 4
.IX Item "x_min_image, x_max_image: aperture of the image"
.IP "verb \- logical" 4
.IX Item "verb - logical"
.PD
.Vb 1
\& [.false.] Whether or not to print progress messages
.Ve
.IP "pct_master \- real" 4
.IX Item "pct_master - real"
.Vb 1
\& [2.]  How often to print when master process
.Ve
.IP "pct_slave \- real" 4
.IX Item "pct_slave - real"
.Vb 1
\& [10.] How often to print when non-master process
.Ve
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fBseis/model\fR
