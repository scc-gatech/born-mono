.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GRAPH 1"
.TH GRAPH 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
Graph \- line plot
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Graph [par=] [<in.H] | Tube
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Line plot of a seplib file
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "n1 \- int" 4
.IX Item "n1 - int"
.Vb 1
\&      REQUIRED
.Ve
.IP "n2,n3 \- int" 4
.IX Item "n2,n3 - int"
.Vb 1
\&      defaults to the number of different values of n1
.Ve
.IP "d1,d2,d3 \- float" 4
.IX Item "d1,d2,d3 - float"
.Vb 1
\&      [1.],[1.],[1.] float standard seplib
.Ve
.IP "o1,o2,o3 \- float" 4
.IX Item "o1,o2,o3 - float"
.Vb 1
\&      [0.],[0.],[0.] float standard seplib
.Ve
.IP "esize    \- int" 4
.IX Item "esize    - int"
.Vb 1
\&      [4]  (4,8)
.Ve
.IP "pad       \-char" 4
.IX Item "pad       -char"
.Vb 4
\&      [1] (0,1 n,y)  (If user specifies mins or maxes then 
\&      padding is turned off unless pad is specified. 
\&      pad is useful if you want the length of the plot 
\&      to be the same as the length of the graph.
.Ve
.IP "transp    \-char" 4
.IX Item "transp    -char"
.Vb 1
\&      [0] =1 flips the first and second axes
.Ve
.IP "xreverse  \-char" 4
.IX Item "xreverse  -char"
.Vb 1
\&      [0] =1 reverses the x axis
.Ve
.IP "yreverse  \-char" 4
.IX Item "yreverse  -char"
.Vb 1
\&      [0]   (0,1 n.y) =1 reverses the y axis
.Ve
.IP "screenht  \-float" 4
.IX Item "screenht  -float"
.Vb 1
\&      [10.24] sets screen height
.Ve
.IP "screenwd  \-float" 4
.IX Item "screenwd  -float"
.Vb 1
\&      [13.75] sets screen width
.Ve
.IP "screenratio \-float" 4
.IX Item "screenratio -float"
.Vb 1
\&      [.75] sets height vs. width ratio
.Ve
.IP "xinch,yinch \-float" 4
.IX Item "xinch,yinch -float"
.Vb 1
\&      [10.24],[7.5]
.Ve
.IP "crowd,crowd1,crowd2 \-float" 4
.IX Item "crowd,crowd1,crowd2 -float"
.Vb 3
\&      [.75] [crowd1=crowd][crowd2=crowd] 
\&      (.75< crowd < 1.) crowd labels off the 
\&      screen by expanding data on 1 or 2 axis.
.Ve
.IP "xll,yll,xur,yur \- float" 4
.IX Item "xll,yll,xur,yur - float"
.Vb 1
\&      set Lower Left and Upper Right coordinates
.Ve
.IP "wantframe \- char" 4
.IX Item "wantframe - char"
.Vb 1
\&      [1] makes a box around the graph
.Ve
.IP "wantframenum \-char" 4
.IX Item "wantframenum -char"
.Vb 1
\&      [1] (0,1, n,y) gives number of the current frame in a movie
.Ve
.IP "wantaxis,wantaxis1,wantaxis2 \- char" 4
.IX Item "wantaxis,wantaxis1,wantaxis2 - char"
.Vb 1
\&      [1] turns on axes
.Ve
.IP "min1, min2, max1, max2\- float" 4
.IX Item "min1, min2, max1, max2- float"
.Vb 1
\&      sets minimum and maximum values for the graph
.Ve
.IP "axisor1, axisor2 \- float" 4
.IX Item "axisor1, axisor2 - float"
.Vb 1
\&      [min1],[min2] sets the minimum value on the axes
.Ve
.IP "o1num, o2num, d1num, d2num\- float" 4
.IX Item "o1num, o2num, d1num, d2num- float"
.Vb 1
\&      set tic spacing on axes
.Ve
.IP "n1tic,n2tic \- int" 4
.IX Item "n1tic,n2tic - int"
.Vb 1
\&      [1] set number of tics
.Ve
.IP "wheretics \- char" 4
.IX Item "wheretics - char"
.Vb 1
\&      [f] (f,a) where to put tics (frame, axes)
.Ve
.IP "wheretitle \-char" 4
.IX Item "wheretitle -char"
.Vb 1
\&      [t] (t,b,l,r) where to put title (top,bottom,left,right)
.Ve
.IP "wherexlabel \- char" 4
.IX Item "wherexlabel - char"
.Vb 1
\&      [b] (t,b) where to put x axis label (top,bottom)
.Ve
.IP "whereylabel \- char" 4
.IX Item "whereylabel - char"
.Vb 1
\&      [l] (l,r) where to put y axis label (left, right)
.Ve
.IP "titlefat,labelfat \- int" 4
.IX Item "titlefat,labelfat - int"
.Vb 1
\&      [1] makes the text fat
.Ve
.IP "label1,label2 \- char*" 4
.IX Item "label1,label2 - char*"
.Vb 1
\&      label for axes
.Ve
.IP "title \- char*" 4
.IX Item "title - char*"
.Vb 1
\&      title for plot
.Ve
.IP "titles \- char*" 4
.IX Item "titles - char*"
.Vb 2
\&      title for different planes separated by colons 
\&      first:second:third
.Ve
.IP "labelsz \- int" 4
.IX Item "labelsz - int"
.Vb 1
\&      [8] font size for labels
.Ve
.IP "titlesz \- int" 4
.IX Item "titlesz - int"
.Vb 1
\&      [10] font size for titles
.Ve
.IP "labelrot \- char" 4
.IX Item "labelrot - char"
.Vb 1
\&      [y] (0,1 n,y) rotate labels 90 degrees
.Ve
.IP "grid,grid1,grid2 \- char" 4
.IX Item "grid,grid1,grid2 - char"
.Vb 1
\&      [0]   (0,1 n,y) turns on grid
.Ve
.IP "g1num,g2num \- float" 4
.IX Item "g1num,g2num - float"
.Vb 1
\&      [d1num],[d2num] grid spacing
.Ve
.IP "gridcol \- int" 4
.IX Item "gridcol - int"
.Vb 1
\&      [axiscol] color of grid
.Ve
.IP "backcol  \- float*" 4
.IX Item "backcol  - float*"
.Vb 1
\&      [0,0,0] background color (R,G,B) between 0 and 1
.Ve
.IP "fillcol  \- float*" 4
.IX Item "fillcol  - float*"
.Vb 1
\&      [backcol(0,0,0)] fill color (R,G,B) between 0 and 1
.Ve
.IP "plotcol  \- int*" 4
.IX Item "plotcol  - int*"
.Vb 1
\&      [6,5,4,3,2,1,...] color for each line plotted
.Ve
.IP "axiscol  \- int*" 4
.IX Item "axiscol  - int*"
.Vb 1
\&      [7,7,7,7,...] color for each axis
.Ve
.IP "plotfat  \- int*" 4
.IX Item "plotfat  - int*"
.Vb 1
\&      [0,0,0,...] makes plotted line fat
.Ve
.IP "axisfat  \- int*" 4
.IX Item "axisfat  - int*"
.Vb 1
\&      [0,0,0,...] makes axes fat
.Ve
.IP "legend   \- char" 4
.IX Item "legend   - char"
.Vb 1
\&      [n] whether or not you want a legend
.Ve
.IP "legendtitle\-char*" 4
.IX Item "legendtitle-char*"
.Vb 1
\&      ['Legend'] Title for legend
.Ve
.IP "legendloc \-char*" 4
.IX Item "legendloc -char*"
.Vb 1
\&      [br, bottom right] Location for legend
.Ve
.IP "legendpos \-float[2]" 4
.IX Item "legendpos -float[2]"
.Vb 1
\&      Legend location.  Specifiy screen coordinates (e.g 10.2,6.1)
.Ve
.IP "legendsz  \-int" 4
.IX Item "legendsz  -int"
.Vb 1
\&      [7] Legend text size
.Ve
.IP "curvelabel\-char*" 4
.IX Item "curvelabel-char*"
.Vb 1
\&      [curve number] : list of curve labels
.Ve
.IP "legendfat \-int" 4
.IX Item "legendfat -int"
.Vb 1
\&      [0] makes legend fat
.Ve
.IP "plot_amp \-  sepfile" 4
.IX Item "plot_amp -  sepfile"
.Vb 1
\&     [none]   file containg amplitudes to use instead of base color
.Ve
.IP "color \-  char*" 4
.IX Item "color -  char*"
.Vb 1
\&     [I]    colortable when using plotamp
.Ve
.IP "arrow    \-  char" 4
.IX Item "arrow    -  char"
.Vb 1
\&      [0] (0,1 n,y) for complex data, makes arrows rather than lines
.Ve
.IP "dash     \-  int*  [0]" 4
.IX Item "dash     -  int*  [0]"
.Vb 11
\&      0 default is continuous.
\&      1 fine dash
\&      2 fine dot
\&      3 dash
\&      4 large dash
\&      5 dot dash
\&      6 large dash smalldash
\&      7 double dot
\&      8 double dash
\&      9 loose dash  The  part  after  the decimal point
\&        determines the pattern repetition interval
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 5
\&   Graph n1=50,100,20 d1=2.5,1,0.33 in=datafile | Tube
\&     plots three curves  in  one  plot  frame  on  the  screen  horiz
\&     coordinates are t(i)  =  o1+i*d1  for  i=0  to  n1-1  (o1=0  by  default)
\&     vert coordinates are read sequentially from datafile--50 vert-coordinates
\&     for  the  1st plot, 100 for the 2nd, 20 for the 3rd.
.Ve
.PP
.Vb 7
\&     Graph n1=100 esize=8 n2=4 n3=10 symbol='*x%$'<datafile >Hplotfile 
\&     This reads n1=100 x,y pairs sequentially from datafile for each of  
\&     n2=4 plots, All on the same Graph.  This is repeated for each of the 
\&     10 Movie frames; The plot axes, etc, are determined for each frame. 
\&     Hplotfile will be a SEPLIB header file pointing to a file containing 
\&     vplot commands to plot the character '*' at each of the 1st 100 points, 
\&      'x'  at each of the 2nd 100 points, etc, for each Movie frame.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Dots,Histogram,xtpen
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fBsep_graphics\fR
.SH "COMPILE LEVEL"
.IX Header "COMPILE LEVEL"
\&\s-1DISTR\s0
