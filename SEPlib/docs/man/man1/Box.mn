.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BOX 1"
.TH BOX 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
Box \- draws a balloon\-style label
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& Box < in.H > out.V [pars]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\& Box outputs the vplot commands to draw a balloon-style label.
.Ve
.SH "COMMENTS"
.IX Header "COMMENTS"
.Vb 10
\& Options let you position the box and pointer, control the
\& size of the labeling, etc. (It is even possible to draw boxes
\& with perspective.) The boxes can be overlayed onto vplot
\& graphics files using the 'erase=once' option of pen filters.
\& For example, 'Tube < Wiggleout.H Boxout.H erase=once' The
\& interact option of pen filters can be used to determine the
\& coordinate of the spot the box's pointer is to point at.
\& (Alas, not all pen filters support the 'interact' capability.)
\& The special pen filter Vppen can be used to combine vplot
\& files.
.Ve
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "x0,y0\-      float" 4
.IX Item "x0,y0-      float"
.Vb 1
\&        [0],[0]  Position of tip of pointer
.Ve
.IP "xt,yt\-      float" 4
.IX Item "xt,yt-      float"
.Vb 1
\&        [2],[0]  Relative Position of Text
.Ve
.IP "size \-      float" 4
.IX Item "size -      float"
.Vb 1
\&        [.25]    Height of text, in inches
.Ve
.IP "label\-      char*" 4
.IX Item "label-      char*"
.Vb 1
\&        ' '   Text string for label
.Ve
.IP "lab_color\-  int" 4
.IX Item "lab_color-  int"
.Vb 1
\&        [7]     Color of text
.Ve
.IP "lab_fat\-    int" 4
.IX Item "lab_fat-    int"
.Vb 1
\&        [0]     Whether or not the label should be fat
.Ve
.IP "pscale \-    float" 4
.IX Item "pscale -    float"
.Vb 1
\&        [1.]    scale factor for width of pointer
.Ve
.IP "lat,long\-   int" 4
.IX Item "lat,long-   int"
.Vb 1
\&        [0],[90]Latitude and longitude of viewpoint (3-D case)
.Ve
.IP "angle\-      int" 4
.IX Item "angle-      int"
.Vb 1
\&        [0]     Longitude of floating label(3-D case)
.Ve
.IP "reverse\-    char" 4
.IX Item "reverse-    char"
.Vb 1
\&        [n]     this mirrors the label left-right
.Ve
.IP "scale0\-     float" 4
.IX Item "scale0-     float"
.Vb 1
\&        [1.]    Scale factor for x0, y0.
.Ve
.IP "scalet\-     float" 4
.IX Item "scalet-     float"
.Vb 2
\&        [1.]    Scale factor for xt, yt. 
\&        (If 'length' option not set.)
.Ve
.IP "length\-     float" 4
.IX Item "length-     float"
.Vb 1
\&        if specified, sets the normalization for xt, yt.
.Ve
.IP "boxit\-     int" 4
.IX Item "boxit-     int"
.Vb 1
\&       [1] Whether (1) or not (0) to create a box arround text
.Ve
.IP "pointer\-     int" 4
.IX Item "pointer-     int"
.Vb 1
\&       [0] Wheter (1)  or not (0) to create arrow
.Ve
.IP "x_oval\-      float" 4
.IX Item "x_oval-      float"
.Vb 1
\&       [0.] X axis length oval to create arround pointer location
.Ve
.IP "y_oval\-      float" 4
.IX Item "y_oval-      float"
.Vb 1
\&       [0.] Y axis length oval to create arround pointer location
.Ve
.SH "COMPILE LEVEL"
.IX Header "COMPILE LEVEL"
.Vb 1
\& DISTR
.Ve
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fBsep_graphics\fR
