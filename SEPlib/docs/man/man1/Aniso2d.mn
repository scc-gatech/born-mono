.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ANISO2D 1"
.TH ANISO2D 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
Aniso2d \- anisotropic modeling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Aniso2d  par=Par < Hsourcefn  > Hverticalgeophone
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "moduli \- file" 4
.IX Item "moduli - file"
.Vb 2
\&        velocity model file (c11,c13,c33,c14, and rho ) (next 4 pars
\&        from this file
.Ve
.IP "n1   \- integer" 4
.IX Item "n1   - integer"
.Vb 1
\&        # of z grid points (becomes nz in the program) max=400
.Ve
.IP "n2   \- integer" 4
.IX Item "n2   - integer"
.Vb 1
\&        # of x grid points (becomes nz in the program) max=400
.Ve
.IP "d1   \- real" 4
.IX Item "d1   - real"
.Vb 1
\&        z grid point spacing (becomes dz in the program)
.Ve
.IP "d2   \- real" 4
.IX Item "d2   - real"
.Vb 3
\&        x grid point spacing (becomes dx in the program)
\&        The constants are in order c11,c13,c33,c44,rho and
\&        are stored nz(fast) by nx
.Ve
.IP "Hsource \- file" 4
.IX Item "Hsource - file"
.Vb 1
\&       Source function file (next two pars from this file)
.Ve
.IP "n1 \- integer" 4
.IX Item "n1 - integer"
.Vb 1
\&       length of source
.Ve
.IP "d1\- real" 4
.IX Item "d1- real"
.Vb 2
\&       time sample interval (this will be used for calculations)
\&       so it should be within stability limits
.Ve
.IP "nt \- integer" 4
.IX Item "nt - integer"
.Vb 1
\&       number of time steps to run, max=4000
.Ve
.IP "nsrc\- integer    #" 4
.IX Item "nsrc- integer    #"
.Vb 1
\&        of shots to make (default=1)
.Ve
.IP "src_1 \- integer" 4
.IX Item "src_1 - integer"
.Vb 1
\&       Position of first source (in grid points)
.Ve
.IP "src_type \- integer" 4
.IX Item "src_type - integer"
.Vb 2
\&       vertical force =1; horizontal =2; shear source =3
\&       explosive force=4
.Ve
.IP "src_inc  \- integer" 4
.IX Item "src_inc  - integer"
.Vb 1
\&       shot increment (in x grid points) default=1
.Ve
.IP "group_1  \- integer" 4
.IX Item "group_1  - integer"
.Vb 1
\&       Position of first receiver for first shot default=1
.Ve
.IP "ngroup   \- integer" 4
.IX Item "ngroup   - integer"
.Vb 1
\&       Number of receivers default=nx
.Ve
.IP "src_depth\- integer" 4
.IX Item "src_depth- integer"
.Vb 1
\&       Shot depth (grid points)
.Ve
.IP "geo_depth\- integer" 4
.IX Item "geo_depth- integer"
.Vb 1
\&       depth of geophones (in grid points)
.Ve
.IP "surf_type\- integer" 4
.IX Item "surf_type- integer"
.Vb 1
\&       free surface (default) =1; absorbing =0
.Ve
.IP "snap_i   \- integer" 4
.IX Item "snap_i   - integer"
.Vb 1
\&       number of time steps between snapshots
.Ve
.IP "rollalong\- integer" 4
.IX Item "rollalong- integer"
.Vb 2
\&       receiver spread rollalong with the
\&       shots? 1=yes=default; 0=no
.Ve
.IP "vpmax    \- real" 4
.IX Item "vpmax    - real"
.Vb 4
\&       maximum velocity in model (optional stability check)
\&       for stability vpmax*dt/dx <.5
\&       since anisotropic sqrt(max(c11,c33)/rho)*dt/dx <.5
\&       for no dispersion (vmin/fmax)/dx >2.8
.Ve
.SH "OUTPUT PARAMETERS"
.IX Header "OUTPUT PARAMETERS"
.IP "Hverticalgeophone \- file" 4
.IX Item "Hverticalgeophone - file"
.Vb 1
\&      is output file for the vertical component seismogram
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&   Program to do anisotropic heterogenous elastic modelling in 2d,
\&   explicit finite-difference 2nd order in time 16th order in x and z
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Iso2d
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fBseis/model\fR
