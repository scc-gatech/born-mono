.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GREY 1"
.TH GREY 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
Grey \- creates raster  vplot
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Grey par= <in.H >out.[V H]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Convert data to [raster \- vplot] from [float, triplets, or byte]
\&\s-1PLOT\s0 =  clip{ [ (\s-1DATA\s0 \- bias)*(it*d1+o1)**tpow ]**gpow }
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "esize  int" 4
.IX Item "esize  int"
.Vb 1
\&       [4]   4-float,3-triplets,1-byte
.Ve
.IP "eout\-  int" 4
.IX Item "eout-  int"
.Vb 1
\&       [-1]  Create vplot [-1] or byte [1] data
.Ve
.IP "tpow \- float" 4
.IX Item "tpow - float"
.Vb 1
\&       [0.]  gain(it) = (it*d1+o1)**tpow, it in samples
.Ve
.IP "pclip\- float" 4
.IX Item "pclip- float"
.Vb 1
\&       [99.]  clip percentile
.Ve
.IP "clip \- float" 4
.IX Item "clip - float"
.Vb 1
\&       clip value (if not specified defaults to pclip)
.Ve
.IP "phalf \-int" 4
.IX Item "phalf -int"
.Vb 1
\&       [85]  gpow percentile
.Ve
.IP "gpow  \-float" 4
.IX Item "gpow  -float"
.Vb 2
\&       [1]  if given gpow<=0,
\&       sample gain power computed at phalf percentile
.Ve
.IP "bias  \-float" 4
.IX Item "bias  -float"
.Vb 1
\&       [0.0] plot = data - bias
.Ve
.IP "gainpanel \- char*" 4
.IX Item "gainpanel - char*"
.Vb 4
\&       [1]-plane(s) where gpow and clip are estimated
\&       i - ith plane is used ( i is integer )
\&       all - all the planes are used
\&       every - calculate gain parameters for every panel
.Ve
.IP "gainstep \- float" 4
.IX Item "gainstep - float"
.Vb 2
\&       the subsampling rate used in estimating gpow and clip
\&       default = max(1,nt/256) (>=1)
.Ve
.IP "allpos   \- char" 4
.IX Item "allpos   - char"
.Vb 1
\&       [n]/y  if yes, map only positive values to 0-255
.Ve
.IP "n1,n2,n3 \- int" 4
.IX Item "n1,n2,n3 - int"
.Vb 1
\&       cube dimensions
.Ve
.IP "d1,d2,d3  \-float" 4
.IX Item "d1,d2,d3  -float"
.Vb 1
\&       standard seplib files
.Ve
.IP "o1,o2,o3  \-float" 4
.IX Item "o1,o2,o3  -float"
.Vb 1
\&       standard seplib files
.Ve
.IP "wantframe,wantframenum char" 4
.IX Item "wantframe,wantframenum char"
.Vb 1
\&       standard vplot definitions (0,1, n,y)
.Ve
.IP "wantaxis,wantaxis1,wantaxis2 \- char" 4
.IX Item "wantaxis,wantaxis1,wantaxis2 - char"
.Vb 1
\&       [1] standard vplot definition(0,1 n,y)
.Ve
.IP "transp  \- char" 4
.IX Item "transp  - char"
.Vb 1
\&       [y] whether or not to transpose output (standard vplot)
.Ve
.IP "xreverse,yreverse \-char" 4
.IX Item "xreverse,yreverse -char"
.Vb 1
\&       standard vplot definitions for output file
.Ve
.IP "min1,min2,max1,max \- float" 4
.IX Item "min1,min2,max1,max - float"
.Vb 1
\&       standard vplot definitions
.Ve
.IP "axisor1,axisor2  \- float [min1],[min2]" 4
.IX Item "axisor1,axisor2  - float [min1],[min2]"
.Vb 1
\&       standard vplot definition
.Ve
.IP "o1num,o2num,d1num,d2num \- float" 4
.IX Item "o1num,o2num,d1num,d2num - float"
.Vb 1
\&       set origin and spacing for tics
.Ve
.IP "n1tic,n2tic \- int" 4
.IX Item "n1tic,n2tic - int"
.Vb 1
\&       [1] set number of tics
.Ve
.IP "wheretics \- char" 4
.IX Item "wheretics - char"
.Vb 1
\&       [f] (f,a) where to put tics (frame, axes)
.Ve
.IP "wheretitle \-char" 4
.IX Item "wheretitle -char"
.Vb 1
\&       [t] (t,b,l,r) where to put title (top, bottom, left, right)
.Ve
.IP "wherexlabel \- char" 4
.IX Item "wherexlabel - char"
.Vb 1
\&       [b] (t,b) where to put x label (top, bottom)
.Ve
.IP "whereylabel \- char" 4
.IX Item "whereylabel - char"
.Vb 1
\&       [l] (l,r) where to put y label (left, right)
.Ve
.IP "titlefat,labelfat \- int" 4
.IX Item "titlefat,labelfat - int"
.Vb 1
\&       [1] makes title and labels fat
.Ve
.IP "label1,label2 \- char*" 4
.IX Item "label1,label2 - char*"
.Vb 1
\&       label for axes
.Ve
.IP "title \- char*" 4
.IX Item "title - char*"
.Vb 1
\&       title for plot
.Ve
.IP "titles \- char*" 4
.IX Item "titles - char*"
.Vb 2
\&       title for different planes separated by colons
\&       first:second:third
.Ve
.IP "labelsz \- int" 4
.IX Item "labelsz - int"
.Vb 1
\&       [8] font size for labels
.Ve
.IP "titlesz \- int" 4
.IX Item "titlesz - int"
.Vb 1
\&       [10] font size for titles
.Ve
.IP "labelrot \- char" 4
.IX Item "labelrot - char"
.Vb 1
\&       [y] (0,1 n,y) rotates the labels 90 degrees
.Ve
.IP "grid,grid1,grid2 \- char" 4
.IX Item "grid,grid1,grid2 - char"
.Vb 1
\&       [0]   (0,1 n,y) turns on a grid
.Ve
.IP "g1num,g2num \- float" 4
.IX Item "g1num,g2num - float"
.Vb 1
\&       [d1num],[d2num] grid spacing
.Ve
.IP "crowd,crowd1,crowd2 \- float" 4
.IX Item "crowd,crowd1,crowd2 - float"
.Vb 3
\&       [.75]  crowd1=crowd  crowd2=crowd 
\&       (.75< crowd < 1.) crowd labels off the 
\&       screen by expanding data on 1 or 2 axis.
.Ve
.IP "gridcol \- int" 4
.IX Item "gridcol - int"
.Vb 1
\&       [axiscol] sets color of grid
.Ve
.IP "xll,yll,xur,yur \- float" 4
.IX Item "xll,yll,xur,yur - float"
.Vb 1
\&      set Lower Left and Upper Right coordinates
.Ve
.IP "backcol  \- float*" 4
.IX Item "backcol  - float*"
.Vb 1
\&       [0,0,0] background color (R,G,B) between 0 and 1
.Ve
.IP "fillcol  \- float*" 4
.IX Item "fillcol  - float*"
.Vb 1
\&       [backcol(0,0,0)] sets fill color (R,G,B) between 0 and 1
.Ve
.IP "plotcol  \- int*" 4
.IX Item "plotcol  - int*"
.Vb 1
\&       [6,5,4,3,2,1,...] sets color for each line plotted
.Ve
.IP "axiscol  \- int*" 4
.IX Item "axiscol  - int*"
.Vb 1
\&       [7,7,7,7,...] sets color for axes
.Ve
.IP "axisfat  \- int*" 4
.IX Item "axisfat  - int*"
.Vb 1
\&       [0,0,0,...] makes axes fat
.Ve
.IP "gridfat  \- int" 4
.IX Item "gridfat  - int"
.Vb 1
\&       [1] makes grid fat
.Ve
.IP "polarity \- int" 4
.IX Item "polarity - int"
.Vb 1
\&       [-1] white is high by default
.Ve
.IP "nreserve \- int" 4
.IX Item "nreserve - int"
.Vb 1
\&       [8] colors to reserve
.Ve
.IP "movish   \- char" 4
.IX Item "movish   - char"
.Vb 1
\&       [n] if y,halves the color table like movie does (0,1 n,y)
.Ve
.IP "wantscalebar \- char" 4
.IX Item "wantscalebar - char"
.Vb 1
\&       [0] (0,1,n,y) turns on scale bar
.Ve
.IP "bartype      \- char" 4
.IX Item "bartype      - char"
.Vb 1
\&       [v]  (h)   horizontaly or verticaly aligned bar
.Ve
.IP "barwidth     \- float" 4
.IX Item "barwidth     - float"
.Vb 1
\&       [.4]     (inches)
.Ve
.IP "barreverse   \- int" 4
.IX Item "barreverse   - int"
.Vb 1
\&       [0]   (0,1,n,y)  reverse the scale
.Ve
.IP "barlabel     \- char" 4
.IX Item "barlabel     - char"
.Vb 1
\&       label for the scale bar
.Ve
.IP "minval       \- float" 4
.IX Item "minval       - float"
.Vb 1
\&       minimum on scale bar
.Ve
.IP "maxval       \- float" 4
.IX Item "maxval       - float"
.Vb 1
\&       maximum on scale bar
.Ve
.IP "bar.xll,bar.xur,bar.yll,bar.yur \- float" 4
.IX Item "bar.xll,bar.xur,bar.yll,bar.yur - float"
.Vb 1
\&       coordinates for the bar (only used when xll,xur,yll, or yur specified)
.Ve
.SH "OUTPUT PARAMETERS"
.IX Header "OUTPUT PARAMETERS"
.IP "esize    \- int" 4
.IX Item "esize    - int"
.Vb 2
\&       [1]  raster data (if eout =1)
\&       [2]  short data (if eout =2)
.Ve
.IP "maxval, minval \-float" 4
.IX Item "maxval, minval -float"
.Vb 3
\&       maximum and minimum value of data to be displayed
\&       by Ta2vplot. For use by Ta2vplot's wantscalebar
\&       option. (if eout=1)
.Ve
.SH "COMMENTS"
.IX Header "COMMENTS"
.Vb 1
\&    This replaces the functionality of Taplot and Ta2vplot
.Ve
.PP
.Vb 16
\&    color= one of {I,i,F,R,W,G} for the canned Movie-style color tables. You
\&    may also append a 'C' to make clipped values show up Red (ie color=IC is
\&    like color=I but with clipped values flagged). You will need to have
\&    nreserve at least 3 for this option to work, since you have to leave the
\&    normal vplot 'Red' (vplot default color 2) as a possibility.
\&    Alternatively, you may also specify a color of the format RGB,
\&    (i.e. color=332) where each of R,G, and B is the integer number of bits
\&    to allot to that primary. This is meant for esize=3, but it also makes
\&    funky color tables when esize=1.
\&    Finally, if 'color' is a text string longer than 2 characters and
\&    does not begin with a digit, it will be taken as the name of a color;
\&    table. (Color tables have lines of the form 'color_number red green blue',
\&    where 0 <= color_number <= 255 and 0. <= red, green, and blue <= 1.
\&    Anything not set will be black. Odd-numbered color table entries between
\&    1 and 253, inclusive, will be the first lost if the output device doesn't
\&    have enough allocatable colors.)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
xtpen, Thplot, Contour
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fBsep_graphics\fR
.SH "COMPILE LEVEL"
.IX Header "COMPILE LEVEL"
\&\s-1DISTR\s0
