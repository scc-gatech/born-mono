.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MCVFIT 1"
.TH MCVFIT 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
MCvfit \- Monte Carlo automatic velocity picks (fit)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
MCvfit  < in.H  par=    > out.H
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "stdin \-  sepfile" 4
.IX Item "stdin -  sepfile"
.Vb 1
\&       input vscan(t,vel), can be n3>1
.Ve
.IP "f_vint\-  sepfile" 4
.IX Item "f_vint-  sepfile"
.Vb 1
\&       optional interval vel file ( = vint.H )
.Ve
.IP "f_verr\-  sepfile" 4
.IX Item "f_verr-  sepfile"
.Vb 1
\&       optional vel misfit error file ( = verr.H )
.Ve
.IP "f_grms\-  sepfile" 4
.IX Item "f_grms-  sepfile"
.Vb 1
\&       optional rms vel guess file ( = grms.H )
.Ve
.IP "f_gint\-  sepfile" 4
.IX Item "f_gint-  sepfile"
.Vb 1
\&       optional interval vel guess file ( = gint.H )
.Ve
.IP "a     \-  real" 4
.IX Item "a     -  real"
.Vb 1
\&       Vrms intercept at t0
.Ve
.IP "b     \-  real" 4
.IX Item "b     -  real"
.Vb 1
\&       Vrms "gradient"
.Ve
.IP "c     \-  real" 4
.IX Item "c     -  real"
.Vb 1
\&       Vrms  "power" function.
.Ve
.IP "nvdiv \-  integer" 4
.IX Item "nvdiv -  integer"
.Vb 1
\&       nlayers per second.  ~20 good.
.Ve
.IP "dvzmax\-  real" 4
.IX Item "dvzmax-  real"
.Vb 1
\&       max allowed MCvint contrast between 2 adjacent layers
.Ve
.IP "v1bnd \-  integer" 4
.IX Item "v1bnd -  integer"
.Vb 1
\&       Don`t allow trial MCvint(t) < v1bnd*Vint(t)
.Ve
.IP "v2bnd \-  integer" 4
.IX Item "v2bnd -  integer"
.Vb 1
\&       Don`t allow trial MCvint(t) > v2bnd*Vint(t)
.Ve
.IP "vmina \-  real" 4
.IX Item "vmina -  real"
.Vb 1
\&       Global min a value
.Ve
.IP "vminb \-  real" 4
.IX Item "vminb -  real"
.Vb 1
\&       Global min b value
.Ve
.IP "vminc \-  real" 4
.IX Item "vminc -  real"
.Vb 1
\&       Global min c value
.Ve
.IP "vmax  \-  real" 4
.IX Item "vmax  -  real"
.Vb 1
\&       global max MCvint value
.Ve
.IP "vsurf \-  real" 4
.IX Item "vsurf -  real"
.Vb 1
\&       near surface constant velocity
.Ve
.IP "tsurf \-  real" 4
.IX Item "tsurf -  real"
.Vb 1
\&       time thickness of near surface constant velocity layer
.Ve
.IP "dtsurfdx-real" 4
.IX Item "dtsurfdx-real"
.Vb 2
\&       allows a dipping water bottom:
\&       tsurf(x) = tsurf + (x-x0)*dtsurfdx.
.Ve
.IP "sigma \-  real" 4
.IX Item "sigma -  real"
.Vb 1
\&       variance of random velocity perturbations.
.Ve
.IP "nwalk \-  integer" 4
.IX Item "nwalk -  integer"
.Vb 5
\&       number of random walks.  A "random walk" starts
\&       with one initial model and tries many random
\&       steps away from that same initial model.
\&       The best model from one walk is used as the
\&       starting model for the next walk.
.Ve
.IP "nrand \-  integer" 4
.IX Item "nrand -  integer"
.Vb 1
\&       number of random steps per walk.
.Ve
.IP "nconv \-  integer" 4
.IX Item "nconv -  integer"
.Vb 2
\&       If fit is unchanged for nconv steps, go to a new walk.
\&       If the fit remains unchanged for nconv walks: stop.
.Ve
.IP "toler \-  real" 4
.IX Item "toler -  real"
.Vb 5
\&       If fit changes < toler, consider that no change.
\&       Note, a perfect fit is 1.0 (100%).
\&       The most critical parameters to try and optimize to get
\&       a better fit are:
\&       vmin*, nvdiv~10/20, dvzmax~0.6, sigma~dvzmax/2
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Monte Carlo fit parameters...
This part randomly perturbs the starting Vint(t) model corresponding
to the starting Vrms(t) model found above.
These parameters refer to *interval* velocity, not Vrms!
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fBseis/velan\fR
