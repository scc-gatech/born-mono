.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MTTMAPS 1"
.TH MTTMAPS 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
MTTmaps \- Band\-limited maximum\-energey Green's function maps
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
MTTmaps <slowmodel.H x_shot= mode=0 >maps.H
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "stdin  \- sepfile" 4
.IX Item "stdin  - sepfile"
.Vb 1
\&       slow(nz,nx) = slowness model
.Ve
.IP "z_shot \- real" 4
.IX Item "z_shot - real"
.Vb 1
\&        [0.] shot Z coordinate
.Ve
.IP "x_shot \-real" 4
.IX Item "x_shot -real"
.Vb 1
\&       [0.] first shot X coordinate
.Ve
.IP "dx_shot\-real" 4
.IX Item "dx_shot-real"
.Vb 1
\&       [dxo] increment in shot X coordinate
.Ve
.IP "n_shot \-integer" 4
.IX Item "n_shot -integer"
.Vb 1
\&       [1] number of shots
.Ve
.IP "mode   \-integer" 4
.IX Item "mode   -integer"
.Vb 4
\&       [0]  grid is stationary the shot moves across the grid
\&       the second output axis coordinates are absolute.
\&       1=grid moves with the shot, the second output axis
\&       coordinates are relative to the shot location.
.Ve
.IP "oxo    \-real" 4
.IX Item "oxo    -real"
.Vb 1
\&       [o2] initial surface coordinate (mode=0)
.Ve
.IP "dxo    \-real" 4
.IX Item "dxo    -real"
.Vb 1
\&       [d2] increment in surface coordinate (mode=0)
.Ve
.IP "nxo    \-integer" 4
.IX Item "nxo    -integer"
.Vb 1
\&       [n2] number of surface coordinates (mode=0)
.Ve
.IP "ozo    \-real" 4
.IX Item "ozo    -real"
.Vb 1
\&       [o1] first depth level  (mode=0)
.Ve
.IP "dzo    \-real" 4
.IX Item "dzo    -real"
.Vb 1
\&       [d1] depth increments (mode=0)
.Ve
.IP "nzo    \-integer" 4
.IX Item "nzo    -integer"
.Vb 1
\&       [n1] number of depth levels on the grid  (mode=0)
.Ve
.IP "oxo    \-real" 4
.IX Item "oxo    -real"
.Vb 1
\&       [(o2-x_shot)] first offset from shot coordinate  (mode=1)
.Ve
.IP "dxo    \-real" 4
.IX Item "dxo    -real"
.Vb 1
\&       [d2] increment in offset (mode=1)
.Ve
.IP "nxo    \-integer" 4
.IX Item "nxo    -integer"
.Vb 1
\&       [n2] number of offsets (mode=1)
.Ve
.IP "ozo    \-real" 4
.IX Item "ozo    -real"
.Vb 1
\&       [o1] first depth level  (mode=1)
.Ve
.IP "dzo    \-real" 4
.IX Item "dzo    -real"
.Vb 1
\&       [d1] depth increments (mode=1)
.Ve
.IP "nzo    \-integer" 4
.IX Item "nzo    -integer"
.Vb 1
\&       [n1] number of depth levels on the grid
.Ve
.IP "n_theta\-integer" 4
.IX Item "n_theta-integer"
.Vb 1
\&       [nxo]  number of angles for the polar grid
.Ve
.IP "nr     \-integer" 4
.IX Item "nr     -integer"
.Vb 1
\&       [nzo] number of radius increments for the polar grid
.Ve
.IP "fmin   \-real" 4
.IX Item "fmin   -real"
.Vb 1
\&       [10] minimum frequency in estimation band
.Ve
.IP "fmax   \-real" 4
.IX Item "fmax   -real"
.Vb 1
\&       [60] maximum frequency in estimation band
.Ve
.IP "nf     \-integer" 4
.IX Item "nf     -integer"
.Vb 1
\&       [16] number of frequencies to use in estimation.
.Ve
.IP "dt     \-real" 4
.IX Item "dt     -real"
.Vb 1
\&       [.008] sampling to use for initial traveltime estimation
.Ve
.SH "OUTPUT PARAMETERS"
.IX Header "OUTPUT PARAMETERS"
.IP "stdout \- sepfile" 4
.IX Item "stdout - sepfile"
.Vb 2
\&      maps(nzo,nxo,3,n_shot) = output
\&      Green's function maps, tt/amp/phase
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&  Band-limited maximum-energy Green's function maps
.Ve
.SH "COMMENTS"
.IX Header "COMMENTS"
.Vb 2
\& Default parameters calculate one shot at user specified output location.
\& x_shot must be specified! The output grid will be the same as the input grid.
.Ve
.PP
.Vb 4
\& When calculating multiple maps you may want to specify the other
\& parameters that control the output grid relative to each shot.
\& There are two modes, if mode=0 the output grid is absolute.
\& If mode=1 the output grid is relative to the shot location.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Hwt3d, FMeikonal, Gfgradz, Hwt3d;
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fBseis/travel\fR
