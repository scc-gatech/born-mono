.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WIGGLE 1"
.TH WIGGLE 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
Wiggle \- plots wiggle traces
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Wiggle < in.H > out.v
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Plotting program; displays data as wiggly traces
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "tpow \- float" 4
.IX Item "tpow - float"
.Vb 1
\&      [0.]  gain(it) = (it*d1+o1)**tpow, it in samples
.Ve
.IP "pclip\- int" 4
.IX Item "pclip- int"
.Vb 1
\&      [99]  clip percentile
.Ve
.IP "clip \- float" 4
.IX Item "clip - float"
.Vb 1
\&      clip value (if not specified defaults to pclip)
.Ve
.IP "n1,n2,n3 \- int" 4
.IX Item "n1,n2,n3 - int"
.Vb 1
\&      cube dimensions
.Ve
.IP "xpos  \- file" 4
.IX Item "xpos  - file"
.Vb 1
\&      header file containing n2 X values for the n2 traces
.Ve
.IP "overplot,preder,seeman \- char" 4
.IX Item "overplot,preder,seeman - char"
.Vb 1
\&      [0]  (0,1 n,y)
.Ve
.IP "poly   \-    char" 4
.IX Item "poly   -    char"
.Vb 1
\&      [0]   (0,1 n,y) Fills the wiggle trace where it is positive
.Ve
.IP "fatp, xmask, ymask  \- char" 4
.IX Item "fatp, xmask, ymask  - char"
.Vb 1
\&      see libvplot vp_area.
.Ve
.IP "pad    \- char" 4
.IX Item "pad    - char"
.Vb 4
\&      (0,1 n,y)  (If user specifies mins or maxes then
\&      padding is turned off unless pad is specified.
\&      pad is useful if you want the length of the plot
\&      to be the same as the length of the graph.
.Ve
.IP "zplot  \-float" 4
.IX Item "zplot  -float"
.Vb 1
\&      [.75]
.Ve
.IP "transp  \- char" 4
.IX Item "transp  - char"
.Vb 1
\&      [1] whether or not to transpose output (standard vplot)
.Ve
.IP "xreverse,yreverse \-char" 4
.IX Item "xreverse,yreverse -char"
.Vb 1
\&      standard vplot definitions for output file
.Ve
.IP "screenht-float" 4
.IX Item "screenht-float"
.Vb 1
\&      [10.24] height of output medium
.Ve
.IP "screenwd-float" 4
.IX Item "screenwd-float"
.Vb 1
\&      [13.75] width of output medium
.Ve
.IP "screeratio-float" 4
.IX Item "screeratio-float"
.Vb 1
\&      [.75] ratio of screen height to width
.Ve
.IP "xll,yll,xur,yur \- float" 4
.IX Item "xll,yll,xur,yur - float"
.Vb 1
\&          set B<l>ower B<l>eft and B<u>pper B<r>ight coordinates
.Ve
.IP "xinch \- float" 4
.IX Item "xinch - float"
.Vb 1
\&      [10.24] standard vplot definition
.Ve
.IP "yinch \- float" 4
.IX Item "yinch - float"
.Vb 1
\&      [7.5] standard vplot definition
.Ve
.IP "crowd,crowd1,crowd2 \- float" 4
.IX Item "crowd,crowd1,crowd2 - float"
.Vb 3
\&      [.75]  crowd1=crowd  crowd2=crowd 
\&      (.75< crowd < 1.) crowd labels off the 
\&      screen by expanding data on 1 or 2 axis.
.Ve
.IP "wantframe,wantframenum \- char" 4
.IX Item "wantframe,wantframenum - char"
.Vb 1
\&      standard vplot definitions (0,1, n,y)
.Ve
.IP "wantaxis,wantaxis1,wantaxis2 \- char" 4
.IX Item "wantaxis,wantaxis1,wantaxis2 - char"
.Vb 1
\&      [1] standard vplot definition (0,1 n,y)
.Ve
.IP "min1,min2,max1,max \- float" 4
.IX Item "min1,min2,max1,max - float"
.Vb 1
\&      standard vplot definitions
.Ve
.IP "axisor1,axisor2  \- float [min1],[min2]" 4
.IX Item "axisor1,axisor2  - float [min1],[min2]"
.Vb 1
\&      standard vplot definition
.Ve
.IP "o1num,o2num,d1num,d2num \- float" 4
.IX Item "o1num,o2num,d1num,d2num - float"
.Vb 1
\&      standard vplot definition
.Ve
.IP "n1tic,n2tic \- int" 4
.IX Item "n1tic,n2tic - int"
.Vb 1
\&      [1] number of tics
.Ve
.IP "wheretics \- char" 4
.IX Item "wheretics - char"
.Vb 1
\&      [f] (f,a) where to put tics (frame, axes)
.Ve
.IP "wheretitle \-char" 4
.IX Item "wheretitle -char"
.Vb 1
\&      [t] (t,b,l,r) where to put title
.Ve
.IP "wherexlabel \- char" 4
.IX Item "wherexlabel - char"
.Vb 1
\&      [b] (t,b) where to put x label
.Ve
.IP "whereylabel \- char" 4
.IX Item "whereylabel - char"
.Vb 1
\&      [l] (l,r) where to put y label
.Ve
.IP "titlefat,labelfat \- int" 4
.IX Item "titlefat,labelfat - int"
.Vb 1
\&      [1] makes title and label fat
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Graph,Grey,xtpen,Thplot,Cubeplot
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fBsep_graphics\fR
.SH "COMPILE LEVEL"
.IX Header "COMPILE LEVEL"
\&\s-1DISTR\s0
