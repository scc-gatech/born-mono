.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RESHAPE 1"
.TH RESHAPE 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
Reshape \- Reshape a SEPlib dataset
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Reshape [pars] < in.H >out.H
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "reshape \- int*" 4
.IX Item "reshape - int*"
.Vb 1
\&  Reshape a dataset (e.g. 1,2,4 will combine 3rd and 4th axis of a dataset,see examples)
.Ve
.IP "esize   \- int" 4
.IX Item "esize   - int"
.Vb 1
\&  [esize from history]  Four posibilities:
.Ve
.Sp
.Vb 1
\&  key1 (make esize=4 from header key1)
.Ve
.Sp
.Vb 1
\&  grid (make esize=4 from the grid values)
.Ve
.Sp
.Vb 1
\&  key1,key2 (make esize=8 from header key1 and key2)
.Ve
.Sp
.Vb 1
\&  x1,x2 (make esize=8 from two array  elements in the first axis of the dataset)
.Ve
.IP "axis_  \- int*" 4
.IX Item "axis_  - int*"
.Vb 1
\&  Window a given axis in the dataset (e.g. axis1=1,3,4)  will change n1=3, and take
.Ve
.Sp
.Vb 1
\&   the first, third, and fourth values of axis 1
.Ve
.IP "n_,o_,d_,label_,unit_" 4
.IX Item "n_,o_,d_,label_,unit_"
.Vb 1
\&   Change description parameters of the output
.Ve
.IP "maxsize \- int" 4
.IX Item "maxsize - int"
.Vb 1
\&  [20]  Maximum amount of memory to use in megabytes
.Ve
.IP "in.ignore_hff \- int" 4
.IX Item "in.ignore_hff - int"
.Vb 1
\&  [0]   Wether (1) or not (0) to ignore header axes
.Ve
.IP "in.ignore_gff \- int" 4
.IX Item "in.ignore_gff - int"
.Vb 1
\&  [0]   Wether (1) or not (0) to ignore grid axes
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Reshape a SEPlib dataset.  Usually this will involve shifting axes
for use with other SEPlib programs. 
.SH "COMMENTS"
.IX Header "COMMENTS"
.Vb 1
\& Parameters are considered in the following order
.Ve
.PP
.Vb 1
\& 1) reshape commands
.Ve
.PP
.Vb 1
\& 2) esize changes
.Ve
.PP
.Vb 1
\& 3) axis changes
.Ve
.PP
.Vb 1
\& 4) User specified n,o,d
.Ve
.PP
.Vb 1
\& As a result if you specify more than 1 change in a single command
.Ve
.PP
.Vb 1
\& the changes are based on the new data description (e.g
.Ve
.PP
.Vb 1
\& reshape=1,1,2,3 axis3=1,5 will be based on axis 2 of the input not axis3.
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 3
\&  Given a regular dataset  n1=10, n2=10 n3=10
\&  Reshape < in.H >out.H  reshape=1,1,3,4
\&  Out: n1=10 n2=1 n3=10 n4=10
.Ve
.PP
.Vb 3
\&  Given: n1=10 n2=10 n3=10
\&  Reshape < in.H >out.H axis3=1,4,7
\&  Out: n1=10 n2=10 n3=3 (where the first, third, and seventh slice are copied)
.Ve
.PP
.Vb 3
\& Given: n1=10 n2=10 n3=10 esize=4
\&  Reshape < in.H >out.H esize=1,3  
\&  Out: esize=8 n1=10 n2=10  (complex from 1,3 samples of axis 1)
.Ve
.PP
.Vb 3
\&  Given:  sep3d n1=10 n2=10 n3=10 keys(s_x,s_y,g_x,g_y)
\&  Reshape < in.H >out.H esize=s_x,s_y 
\&  Out: esize=8 n1=10 n2=10  (header kay values s_x,s_y)
.Ve
.PP
.Vb 3
\&  Given:  sep3d dataset with a grid n2=20 n3=20
\&  Reshape < in.H >out.H esize=grid
\&  Out: esize=4  Grid values changed from integ to real, n1=20 n2=20 n3=1
.Ve
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fButil/cube\fR
