.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PHASE 1"
.TH PHASE 1 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
Phase \- Phaseshift migration (possibly split\-step)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Phase par=parfile.P D=input.H  R=output.H S=slow.H
.SH "COORDINATE SYSTEM FOR DOWNWARD CONTINUATION DESCRIPTION PARAMETERS"
.IX Header "COORDINATE SYSTEM FOR DOWNWARD CONTINUATION DESCRIPTION PARAMETERS"
.IP "amx_n (integer)" 4
.IX Item "amx_n (integer)"
.Vb 1
\&  Number of CMP in X (axis 1 of D,R and S)
.Ve
.IP "amx_d (integer)" 4
.IX Item "amx_d (integer)"
.Vb 1
\&  Sampling of CMP in X
.Ve
.IP "amx_o (integer)" 4
.IX Item "amx_o (integer)"
.Vb 1
\&  First CMP  X location
.Ve
.IP "amy_\|_n (integer)" 4
.IX Item "amy__n (integer)"
.Vb 1
\&  Number of CMP in X (axis 2 of D,R and S)
.Ve
.IP "amy_d (integer)" 4
.IX Item "amy_d (integer)"
.Vb 1
\&  Sampling of CMP in Y
.Ve
.IP "amy_o (integer)" 4
.IX Item "amy_o (integer)"
.Vb 1
\&  First CMP  Y location
.Ve
.IP "ahx_\|_n (integer)" 4
.IX Item "ahx__n (integer)"
.Vb 1
\&  Number of half offsets in X (axis 3 of D and possibly R  )
.Ve
.IP "ahx_d (integer)" 4
.IX Item "ahx_d (integer)"
.Vb 1
\&  Sampling of half offsets in X
.Ve
.IP "ahx_o (integer)" 4
.IX Item "ahx_o (integer)"
.Vb 1
\&  First half offset  X location
.Ve
.IP "ahy_\|_n (integer)" 4
.IX Item "ahy__n (integer)"
.Vb 1
\&  Number of half offsets in Y (axis 4 of D and possibly R)
.Ve
.IP "ahy_d (integer)" 4
.IX Item "ahy_d (integer)"
.Vb 1
\&  Sampling of half offset in Y
.Ve
.IP "ahy_o (integer)" 4
.IX Item "ahy_o (integer)"
.Vb 1
\&  First CMP  Y location
.Ve
.SH "R/S  DESCRIPTION PARAMETERS"
.IX Header "R/S  DESCRIPTION PARAMETERS"
.IP "az_\|_n (integer) (axis 3 of S, axis 5 of R)" 4
.IX Item "az__n (integer) (axis 3 of S, axis 5 of R)"
.Vb 1
\&  Number of depth steps
.Ve
.IP "az_\|_d (integer)" 4
.IX Item "az__d (integer)"
.Vb 1
\&  Sampling of depths
.Ve
.IP "az_\|_o (integer)" 4
.IX Item "az__o (integer)"
.Vb 1
\&  First depth of model
.Ve
.IP "image_real (logcal)" 4
.IX Item "image_real (logcal)"
.Vb 1
\&  Whether or not make the image real
.Ve
.SH "DATA DESCRIPTION PARAMETERS"
.IX Header "DATA DESCRIPTION PARAMETERS"
.IP "aw_\|_n (integer) (axis 5 of D)" 4
.IX Item "aw__n (integer) (axis 5 of D)"
.Vb 1
\&  Number of frequencies
.Ve
.IP "aw_\|_d (integer)" 4
.IX Item "aw__d (integer)"
.Vb 1
\&  Sampling of frequencies
.Ve
.IP "aw_\|_o (integer)" 4
.IX Item "aw__o (integer)"
.Vb 1
\&  First frequency of data
.Ve
.SH "SLOWNESS PARAMETERS"
.IX Header "SLOWNESS PARAMETERS"
.IP "velocity  (logical)" 4
.IX Item "velocity  (logical)"
.Vb 1
\& [.false.] whether or not S is velocity
.Ve
.IP "nref  (integer)" 4
.IX Item "nref  (integer)"
.Vb 1
\& [1] number of velocities for each depth step
.Ve
.SH "PH GATHERS"
.IX Header "PH GATHERS"
.IP "pCIG (logical)" 4
.IX Item "pCIG (logical)"
.Vb 1
\& [.false.] whether (.true.) or not (.false.) to create PH gathers
.Ve
.IP "apx_\|_n (integer)" 4
.IX Item "apx__n (integer)"
.Vb 1
\&  Number of PH in X (axis 3 of R)
.Ve
.IP "apx_d (integer)" 4
.IX Item "apx_d (integer)"
.Vb 1
\&  Sampling of PH in X
.Ve
.IP "apx_o (integer)" 4
.IX Item "apx_o (integer)"
.Vb 1
\&  First PH X location
.Ve
.IP "apy_\|_n (integer)" 4
.IX Item "apy__n (integer)"
.Vb 1
\&  Number of PH in Y (axis 4 of R)
.Ve
.IP "apy_d (integer)" 4
.IX Item "apy_d (integer)"
.Vb 1
\&  Sampling of PH in Y
.Ve
.IP "apy_o (integer)" 4
.IX Item "apy_o (integer)"
.Vb 1
\&  First PH  Y location
.Ve
.IP "pcigeps (float)" 4
.IX Item "pcigeps (float)"
.Vb 1
\&  [.1] Epsilon parameter for Phgather construction
.Ve
.SH "MEMORY MANAGEMET"
.IX Header "MEMORY MANAGEMET"
.IP "nzs (integer)" 4
.IX Item "nzs (integer)"
Number of Z steps to do in memory
.IP "nws (integer)" 4
.IX Item "nws (integer)"
Number of W to hold in memory
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\& Perform split step phase shift migration/modeling
.Ve
.SH "COMMENTS"
.IX Header "COMMENTS"
.IP "anx_n,ahx_d,ahx_o and axis 1 of D and R  must be the same" 4
.IX Item "anx_n,ahx_d,ahx_o and axis 1 of D and R  must be the same"
.PD 0
.IP "any_n,ahy_d,ahy_o and axis 2 of D and R  must be the same" 4
.IX Item "any_n,ahy_d,ahy_o and axis 2 of D and R  must be the same"
.IP "Slowness must contain entire  span of X and Y" 4
.IX Item "Slowness must contain entire  span of X and Y"
.IP "az_\|_n,az_\|_d,az_\|_o , axis 3 of S and axis 5 of R  must be the same" 4
.IX Item "az__n,az__d,az__o , axis 3 of S and axis 5 of R  must be the same"
.IP "When doing ph gathers apx_n = ahx_n = n3 of D" 4
.IX Item "When doing ph gathers apx_n = ahx_n = n3 of D"
.IP "When doing ph gathers apy_n = ahy_n = n4 of D" 4
.IX Item "When doing ph gathers apy_n = ahy_n = n4 of D"
.IP "When doing offset gathers  ahx_n,ahx_d,ahx_o = axis 3 of D and R" 4
.IX Item "When doing offset gathers  ahx_n,ahx_d,ahx_o = axis 3 of D and R"
.IP "When doing offset gathers  ahy_n,ahy_d,ahy_o = axis 4 of D and R" 4
.IX Item "When doing offset gathers  ahy_n,ahy_d,ahy_o = axis 4 of D and R"
.IP "nzs must be a multiple of az_\|_n" 4
.IX Item "nzs must be a multiple of az__n"
.IP "nws*nmpi_threads*nomp_threads must be a multiple of aw_\|_n" 4
.IX Item "nws*nmpi_threads*nomp_threads must be a multiple of aw__n"
.PD
.SH "CATEGORY"
.IX Header "CATEGORY"
\&\fBseis/image\fR
