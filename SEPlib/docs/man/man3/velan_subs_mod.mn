.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "net::koko::src::our::seplib-6.1::docs::pod::seplib_base::velan_subs_mod 3"
.TH net::koko::src::our::seplib-6.1::docs::pod::seplib_base::velan_subs_mod 3 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
velan_subs_mod \- Do semblance analsysis
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`call init_velan(vel0,delv,numv,o_1,d_1,d_tout,sm,mu)\*(C'\fR
.PP
\&\f(CW\*(C`call velan_exe(input,output,offsq)\*(C'\fR
.SH "INITIALIZER init_velan"
.IX Header "INITIALIZER init_velan"
.Sh "\s-1INPUT\s0 \s-1PARAMETERS\s0"
.IX Subsection "INPUT PARAMETERS"
.IP "vel0 \-  real" 4
.IX Item "vel0 -  real"
.Vb 1
\&        initial velocity
.Ve
.IP "delv \-  real" 4
.IX Item "delv -  real"
.Vb 1
\&        sampling in velocity
.Ve
.IP "numv \-  integer" 4
.IX Item "numv -  integer"
.Vb 1
\&        number of velocities
.Ve
.IP "o_1  \-  real" 4
.IX Item "o_1  -  real"
.Vb 1
\&        first time
.Ve
.IP "d_1  \-  real" 4
.IX Item "d_1  -  real"
.Vb 1
\&        sampling in time
.Ve
.IP "d_tout \-real" 4
.IX Item "d_tout -real"
.Vb 1
\&        sampling of output times
.Ve
.IP "sm    \- real" 4
.IX Item "sm    - real"
.Vb 1
\&        smoothing window
.Ve
.IP "mu    \- real" 4
.IX Item "mu    - real"
.Vb 1
\&        muting parameter to apply
.Ve
.SH "OPERATOR"
.IX Header "OPERATOR"
.Sh "\s-1INPUT\s0 \s-1PARAMETERS\s0"
.IX Subsection "INPUT PARAMETERS"
.ie n .IP "input \- "" real(:,:)""" 4
.el .IP "input \- \f(CW real(:,:)\fR" 4
.IX Item "input -  real(:,:)"
.Vb 1
\&        input  traces
.Ve
.ie n .IP "offsq \-  real(:)" 4
.el .IP "offsq \- \f(CW real(:)\fR" 4
.IX Item "offsq -  real(:)"
.Vb 1
\&        Offset for traces
.Ve
.Sh "\s-1OUTPUT\s0 \s-1PARAMETERS\s0"
.IX Subsection "OUTPUT PARAMETERS"
.ie n .IP "output \- ""real(:,:)""" 4
.el .IP "output \- \f(CWreal(:,:)\fR" 4
.IX Item "output - real(:,:)"
.Vb 1
\&         output velocity
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Module to make semblance panels given irregular traces
.SH "COMMENTS"
.IX Header "COMMENTS"
Used by Velan90
.SH "SEE ALSO"
.IX Header "SEE ALSO"
nmo_mod,Nmo3d
.SH "LIBRARY"
.IX Header "LIBRARY"
\&\fBsepvelanf90\fR
