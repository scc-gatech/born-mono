.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "net::koko::src::our::seplib-6.1::docs::pod::seplib_base::srite 3"
.TH net::koko::src::our::seplib-6.1::docs::pod::seplib_base::srite 3 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
srite \- write an array to seplib tag
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`int srite(tag, buffer, nbytes)\*(C'\fR
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "char*\-  tag" 4
.IX Item "char*-  tag"
.Vb 1
\&      tag of history file
.Ve
.IP "int \-   nbytes" 4
.IX Item "int -   nbytes"
.Vb 1
\&      number of bytes to be written
.Ve
.IP "void*\-  buffer" 4
.IX Item "void*-  buffer"
.Vb 1
\&      values to be written
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Writes out data to dataset attached to given tag
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
.RS 4
n= number of bytes written
.RE
.SH "COMMENTS"
.IX Header "COMMENTS"
The tag argument is either the string \*(L"out\*(R" or any tag appropriate for
use with \fIauxout()\fR.  This means either an explicit filename or a
command line redirect parameter tag=filename.  Buffer is the location
of contiguous bytes from which the output will be written.  Unless an
end of file or I/O error is encountered, it is guaranteed that all
nbytes bytes will be written; this is true even for terminals and
pipes.  In any event the number of characters written is returned.
.PP
Sreed and srite now perform conversions from machine independent
external data formats to the internal data representation. For srite
this defaults to \*(L"xdr_float\*(R". This may be overridden by
\&\*(L"data_format=...\*(R" on the command line or (for tag=\*(L"out\*(R" only) by a
call to \f(CW\*(C`set_format(tag, "...")\*(C'\fR  The valid types are \*(L"xdr_float\*(R",
\&\*(L"xdr_integer\*(R", \*(L"xdr_byte\*(R", \*(L"native_float\*(R", \*(L"native_byte\*(R" and \*(L"vplot\*(R". 
.PP
If the internal representation is larger than the representation of
the external data then you must be careful to make nbytes the size
of the converted data.  e.g. on a cray system when
writing xdr_float data, nbytes refers to the number of bytes to be written.
This will be in 4\-byte xdr_floats, but the internal storage will be in
8\-byte cray floats, so the buffer must be 2*nbytes long.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
sreed, sseek, ssize, auxclose 
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
If an end of file is reached, the returned byte count may be less than
the requested amount.  The next call will return zero.  If the write
was otherwise unsuccessful the program will be terminated via
\&\fIseperr()\fR.  Many conditions can generate an error: physical I/O errors,
bad buffer address, preposterous nbytes, tag not that of an output
file.
.SH "BUGS"
.IX Header "BUGS"
.SH "KEYWORDS"
.IX Header "KEYWORDS"
write xdr output
.SH "LIBRARY"
.IX Header "LIBRARY"
\&\fBsep\fR
