.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "net::koko::src::our::seplib-6.1::docs::pod::seplib_base::slice 3"
.TH net::koko::src::our::seplib-6.1::docs::pod::seplib_base::slice 3 "Thu Feb 12 16:08:08 2004" "6.0" "SEPlib Manual Pages"
.SH "NAME"
snap,slice \- write to the screen an array (through Grey etc)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`int snap(name,n1,n2,matrix)\*(C'\fR
.SH "INPUT PARAMETERS"
.IX Header "INPUT PARAMETERS"
.IP "char* \- name" 4
.IX Item "char* - name"
.Vb 1
\&      tag of desired output file
.Ve
.IP "int   \- n1" 4
.IX Item "int   - n1"
.Vb 1
\&      size of slice in fast dimension
.Ve
.IP "int   \- n2" 4
.IX Item "int   - n2"
.Vb 1
\&      size of slice along slow axess
.Ve
.IP "void* \-  matrix" 4
.IX Item "void* -  matrix"
.Vb 1
\&      matrix value of slice
.Ve
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
.Vb 1
\&        0 = if successful
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Slice, and snap provide a convenient method of output for
snapshots of intermediate computations or iterations in a form
suitable for processing by other seplib functions (such as Window,
Movie, etc.)  None of the inputs is modified.
.SH "COMMENTS"
.IX Header "COMMENTS"
The input tag name is used to locate and update an associated
auxiliary history file.  The name of the output header is \*(L"name\*(R".
This may be modified by specifying `name=newtag' on the command line
when a program is invoked.  Input is an n1 by n2 matrix of floating
point values containing the snapshot.  
.PP
If more than one call to these subroutines is made, the snapshot is
appended to the file and n3 is updated in the history file.  (This
frees the user from the chore of counting the number of output frames,
a special convenience while debugging.)
.PP
The subroutine \fIdatapath()\fR is used to generate a name for an output
data file.
.PP
\&\fIslice()\fR only: esize is the element size, typically 1 or 4.
.PP
\&\fIsnap()\fR only: If the output header does not exist no snapshots are written.
This allows the user to decide whether or not to create snapshots
on a given run.
.SH "FILES"
.IX Header "FILES"
name	auxiliary header
.SH "SEE ALSO"
.IX Header "SEE ALSO"
seplib, datapath, srite
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Program execution is terminated with an appropriate error message
if the program attempts to change the snapshot size along the way.
Also for appropriate I/O related errors.
.SH "BUGS"
.IX Header "BUGS"
Prexisting snapshot files with the same name are overwritten
without qualms.
.SH "KEYWORDS"
.IX Header "KEYWORDS"
snapshot slice output
.SH "LIBRARY"
.IX Header "LIBRARY"
\&\fBsep\fR
